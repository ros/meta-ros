Index: git/Platform/Linux/CreateRedist/Redist_OpenNi.py
===================================================================
--- git.orig/Platform/Linux/CreateRedist/Redist_OpenNi.py
+++ git/Platform/Linux/CreateRedist/Redist_OpenNi.py
@@ -247,222 +247,6 @@ print("Num of compile jobs:", calc_jobs_
 
 print()
 
-#--------------Build Project---------------------------------------------------#
-print("* Building OpenNI...")
-logger.info("Building OpenNI...")
-
-# Build
-#execute_check("gacutil -u OpenNI.net > " + SCRIPT_DIR + "/Output/gacutil.txt", "Remove from GAC")
-execute_check('make ' + MAKE_ARGS + ' -C ' + SCRIPT_DIR + '/../Build clean > ' + SCRIPT_DIR + '/Output/Build' + PROJECT_NAME + '_clean.txt', 'Cleaning')
-execute_check('make ' + MAKE_ARGS + ' -C ' + SCRIPT_DIR + '/../Build > ' + SCRIPT_DIR + '/Output/Build' + PROJECT_NAME + '.txt', 'Building')
-
-#--------------Doxygen---------------------------------------------------------#
-print("* Creating Doxygen...")
-logger.info("Creating DoxyGen...")
-os.chdir("../../../Source/DoxyGen");
-if os.path.exists("html"):
-    os.system("rm -rf html")
-# Running doxygen
-os.makedirs("html")
-execute_check("doxygen Doxyfile > "+ SCRIPT_DIR + "/Output/EngineDoxy.txt", "Creating Documentation")
-
-# remove unneeded files
-os.system("rm -rf html/*.map html/*.md5 html/*.hhc html/*.hhk html/*.hhp")
-
-#-------------Create Redist Dir------------------------------------------------#
-print("* Creating Redist Dir...")
-logger.info("Creating Redist Dir...")
-os.chdir(SCRIPT_DIR + "/..")
-
-REDIST_NAME = "OpenNI-Bin-Dev-" + TARGET + "-v" + version
-
-REDIST_DIR = "Redist/" + REDIST_NAME
-
-# Removing the old directory
-if (os.path.exists(REDIST_DIR)):
-    shutil.rmtree(REDIST_DIR)
-
-# Creating new directory tree
-os.makedirs(REDIST_DIR)
-os.makedirs(REDIST_DIR + "/Bin")
-os.makedirs(REDIST_DIR + "/Lib")
-os.makedirs(REDIST_DIR + "/Jar")
-os.makedirs(REDIST_DIR + "/Include")
-os.makedirs(REDIST_DIR + "/Documentation")
-os.makedirs(REDIST_DIR + "/Samples")
-os.makedirs(REDIST_DIR + "/Samples/Bin")
-os.makedirs(REDIST_DIR + "/Samples/Bin/" + PLATFORM + "-Debug")
-os.makedirs(REDIST_DIR + "/Samples/Bin/" + PLATFORM + "-Release")
-os.makedirs(REDIST_DIR + "/Samples/Build")
-os.makedirs(REDIST_DIR + "/Samples/Config")
-os.makedirs(REDIST_DIR + "/Samples/Res")
-
-#-------------Copy files to redist---------------------------------------------#
-print("* Copying files to redist dir...")
-logger.info("Copying files to redist dir...")
-
-#license
-shutil.copy("../../GPL.txt", REDIST_DIR)
-shutil.copy("../../LGPL.txt", REDIST_DIR)
-
-#lib
-if ostype == "Darwin":
-    LIBS_TYPE = ".dylib"
-else:
-    LIBS_TYPE = ".so"
-
-shutil.copy("Bin/" + PLATFORM + "-Release/libnimCodecs"+LIBS_TYPE, REDIST_DIR + "/Lib")
-shutil.copy("Bin/" + PLATFORM + "-Release/libnimMockNodes"+LIBS_TYPE, REDIST_DIR + "/Lib")
-shutil.copy("Bin/" + PLATFORM + "-Release/libnimRecorder"+LIBS_TYPE, REDIST_DIR + "/Lib")
-shutil.copy("Bin/" + PLATFORM + "-Release/libOpenNI"+LIBS_TYPE, REDIST_DIR + "/Lib")
-shutil.copy("Bin/" + PLATFORM + "-Release/libOpenNI.jni"+LIBS_TYPE, REDIST_DIR + "/Lib")
-
-#bin
-MonoDetected = 0
-shutil.copy("Bin/" + PLATFORM + "-Release/niReg", REDIST_DIR + "/Bin")
-shutil.copy("Bin/" + PLATFORM + "-Release/niLicense", REDIST_DIR + "/Bin")
-        
-# java wrapper
-shutil.copy("Bin/" + PLATFORM + "-Release/org.OpenNI.jar", REDIST_DIR + "/Jar")
-shutil.copy("Bin/" + PLATFORM + "-Release/org.OpenNI.jar", REDIST_DIR + "/Samples/Bin/" + PLATFORM + "-Debug")
-shutil.copy("Bin/" + PLATFORM + "-Release/org.OpenNI.jar", REDIST_DIR + "/Samples/Bin/" + PLATFORM + "-Release")
-
-#docs
-shutil.copytree("../../Source/DoxyGen/html", REDIST_DIR + "/Documentation/html")
-
-#include
-for includeFile in os.listdir("../../Include"):
-    if not os.path.isdir("../../Include/" + includeFile):
-        shutil.copy("../../Include/" + includeFile, REDIST_DIR + "/Include")
-
-shutil.copytree("../../Include/Linux-x86", REDIST_DIR + "/Include/Linux-x86")
-shutil.copytree("../../Include/Linux-Arm", REDIST_DIR + "/Include/Linux-Arm")
-shutil.copytree("../../Include/Linux-AArch64", REDIST_DIR + "/Include/Linux-AArch64")
-shutil.copytree("../../Include/Linux-Powerpc", REDIST_DIR + "/Include/Linux-Powerpc")
-shutil.copytree("../../Include/Linux-Mips", REDIST_DIR + "/Include/Linux-Mips")
-shutil.copytree("../../Include/Linux-Riscv64", REDIST_DIR + "/Include/Linux-Riscv64")
-shutil.copytree("../../Include/Linux-Loongarch64", REDIST_DIR + "/Include/Linux-Loongarch64")
-shutil.copytree("../../Include/MacOSX", REDIST_DIR + "/Include/MacOSX")
-shutil.copytree("Build/Common", REDIST_DIR + "/Samples/Build/Common")
-
-# samples
-samples_list = os.listdir("Build/Samples")
-if '.svn' in samples_list:
-    samples_list.remove('.svn')
-
-if PLATFORM == 'CE4100':
-    samples_list.remove('NiViewer')
-    samples_list.remove('NiSimpleViewer')
-
-if PLATFORM == 'Arm':
-    samples_list.remove('NiUserTracker')
-    samples_list.remove('NiSimpleViewer')
-    samples_list.remove('NiHandTracker')
-    samples_list.remove('NiUserSelection')
-
-if (MonoDetected == 0):
-    samples_list.remove("SimpleRead.net")
-    samples_list.remove("SimpleViewer.net")
-    samples_list.remove("UserTracker.net")
-
-print("Samples:", samples_list)
-
-for sample in samples_list:
-    shutil.copytree("../../Samples/" + sample, REDIST_DIR + "/Samples/" + sample)
-    shutil.copy("Build/Samples/"+ sample + "/Makefile", REDIST_DIR + "/Samples/"+ sample)
-
-#data
-shutil.copy("../../Data/SamplesConfig.xml", REDIST_DIR + "/Samples/Config/SamplesConfig.xml")
-
-#res
-res_files = os.listdir("Build/Res")
-if '.svn' in res_files:
-    res_files.remove('.svn')
-for res_file in res_files:
-    shutil.copy("Build/Res/" + res_file, REDIST_DIR + "/Samples/Res")
-
-# remove all .svn files
-os.system("find " + REDIST_DIR + "/. | grep .svn | xargs rm -rf")
-
-# remove all .svn files
-os.system("find " + REDIST_DIR + "/Samples/. | grep .svn | xargs rm -rf")
-
-#-----Remove Read Only Attrib--------------------------------------------------#
-print("* Removing Read Only Attributes...")
-logger.info("Removing Read Only Attributes...")
-os.system ("chmod -R +r " + REDIST_DIR + "/*")
-
-#--------Fixing Files----------------------------------------------------------#
-print("* Fixing Files...")
-logger.info("Fixing Files...")
-for root, dirs, files in os.walk(REDIST_DIR + "/Samples"):
-    fix_file('', root, files)
-
-#-------Creating project and solutions-----------------------------------------#
-print("* Creating Makefile...")
-logger.info("Creating Makefile...")
-
-MAKEFILE = open(REDIST_DIR + "/Samples/Build/Makefile", 'w')
-MAKEFILE.write("include Common/CommonDefs.mak\n\n")
-MAKEFILE.write(".PHONY: all\n\n")
-MAKEFILE.write("NETPROJ = \n")
-
-MAKEFILE.write("ifneq \"$(realpath /usr/bin/gmcs)\" \"\"\n");
-for sample in samples_list:
-    if sample.find(".net") >0:
-        MAKEFILE.write("\tNETPROJ += " + sample + "\n")
-MAKEFILE.write("endif\n\n");
-
-MAKEFILE.write("all: $(NETPROJ) ")
-for sample in samples_list:
-    if sample.find(".net") == -1:
-        MAKEFILE.write(sample + " ")
-MAKEFILE.write("\n\n")
-
-for sample in samples_list:
-    MAKEFILE.write("\n")
-    MAKEFILE.write(".PHONY: "+sample+"\n")
-    MAKEFILE.write(sample+":\n")
-    MAKEFILE.write("\t$(MAKE) -C ../"+sample+"\n")
-    
-# Close files
-MAKEFILE.close()
-
-#-------Copy install script---------------------------------------------------#
-print("* Copying install script...")
-logger.info("Copying install script...")
-
-copy_install_script(PLATFORM, "CreateRedist/install.sh", REDIST_DIR)
-
-#-------------Build Samples---------------------------------------------------#
-print("* Building Samples in release configuration......")
-logger.info("Building Samples in release configuration...")
-
-# Build project solution
-execute_check("make " + MAKE_ARGS + " -C " + REDIST_DIR + "/Samples/Build " + " > "+SCRIPT_DIR+"/Output/BuildSmpRelease.txt", "Build samples in release")
-
-print("* Building Samples in debug configuration......")
-logger.info("Building Samples in debug configuration...")
-
-# Build project solution
-execute_check("make " + MAKE_ARGS + " CFG=Debug -C " + REDIST_DIR + "/Samples/Build > "+SCRIPT_DIR+"/Output/BuildSmpDebug.txt", "Build samples in debug")
-
-# delete intermidiate files
-for sample in samples_list:
-   os.system("rm -rf " + REDIST_DIR + "/Samples/"+sample+"/" + PLATFORM + "/Debug")
-   os.system("rm -rf " + REDIST_DIR + "/Samples/"+sample+"/" + PLATFORM + "/Release")
-
-#-------------Create TAR-------------------------------------------------------#
-print("* Creating tar......")
-logger.info("Creating tar...")
-
-os.makedirs(SCRIPT_DIR+"/Final")
-os.chdir(SCRIPT_DIR + "/../Redist")
-
-execute_check("tar -cjf " +SCRIPT_DIR+"/Final/" + REDIST_NAME + ".tar.bz2 " + REDIST_NAME, "Tar")
-
-os.chdir(SCRIPT_DIR)
-
 #-------------CleanUP----------------------------------------------------------#
 print("* Redist OpenNi Ended.   !!")
 logger.info("Redist OpenNi Ended.")
