Add the OGRE version to the filenames

This is needed to allow Gazebo Classic to use OGRE 1.9 alongside
the OGRE version required for newer Gazebo releases.

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Rob Woolley <rob.woolley@windriver.com>

Index: git/CMake/CMakeLists.txt
===================================================================
--- git.orig/CMake/CMakeLists.txt
+++ git/CMake/CMakeLists.txt
@@ -16,12 +16,12 @@
 if(WIN32 OR APPLE)
 	set(OGRE_CMAKE_DIR "CMake")
 else()
-	set(OGRE_CMAKE_DIR "${OGRE_LIB_DIRECTORY}/OGRE/cmake")
+	set(OGRE_CMAKE_DIR "${OGRE_LIB_DIRECTORY}/OGRE19/cmake")
 endif()
 
 set(INST_FILES
   Packages/FindOIS.cmake
-  Packages/FindOGRE.cmake
+  Packages/FindOGRE19.cmake
   Utils/FindPkgMacros.cmake
   Utils/MacroLogFeature.cmake
   Utils/PreprocessorUtils.cmake
Index: git/CMake/ConfigureBuild.cmake
===================================================================
--- git.orig/CMake/ConfigureBuild.cmake
+++ git/CMake/ConfigureBuild.cmake
@@ -183,7 +183,7 @@ endif ()
 
 # generate OgreBuildSettings.h
 configure_file(${OGRE_TEMPLATES_DIR}/OgreBuildSettings.h.in ${OGRE_BINARY_DIR}/include/OgreBuildSettings.h @ONLY)
-install(FILES ${OGRE_BINARY_DIR}/include/OgreBuildSettings.h DESTINATION include/OGRE)
+install(FILES ${OGRE_BINARY_DIR}/include/OgreBuildSettings.h DESTINATION include/OGRE19)
 
 
 # Create the pkg-config package files on Unix systems
@@ -214,50 +214,50 @@ if (UNIX)
     endif ()
     # there is no pkgconfig file for freeimage, so we need to add that lib manually
     set(OGRE_ADDITIONAL_LIBS "${OGRE_ADDITIONAL_LIBS} -lfreeimage")
-    configure_file(${OGRE_TEMPLATES_DIR}/OGREStatic.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE.pc @ONLY)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGREStatic.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19.pc @ONLY)
   else ()
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE.pc @ONLY)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19.pc @ONLY)
   endif ()
-  install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+  install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
 
   # configure additional packages
 
   if (OGRE_BUILD_PLUGIN_PCZ)
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-PCZ.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE-PCZ.pc @ONLY)
-    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE-PCZ.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-PCZ.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-PCZ.pc @ONLY)
+    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-PCZ.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
   endif ()
 
   if (OGRE_BUILD_COMPONENT_PAGING)
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Paging.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Paging.pc @ONLY)
-    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Paging.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Paging.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Paging.pc @ONLY)
+    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Paging.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
   endif ()
 
   if (OGRE_BUILD_COMPONENT_TERRAIN)
     if (OGRE_BUILD_COMPONENT_PAGING)
-      set(OGRE_PAGING_ADDITIONAL_PACKAGES ", OGRE-Paging = ${OGRE_VERSION}")
+      set(OGRE_PAGING_ADDITIONAL_PACKAGES ", OGRE19-Paging = ${OGRE_VERSION}")
     endif ()
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Terrain.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Terrain.pc @ONLY)
-    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Terrain.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Terrain.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Terrain.pc @ONLY)
+    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Terrain.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
   endif ()
 
   if (OGRE_BUILD_COMPONENT_RTSHADERSYSTEM)
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-RTShaderSystem.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE-RTShaderSystem.pc @ONLY)
-    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE-RTShaderSystem.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-RTShaderSystem.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-RTShaderSystem.pc @ONLY)
+    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-RTShaderSystem.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
   endif ()
 
   if (OGRE_BUILD_COMPONENT_PROPERTY)
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Property.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Property.pc @ONLY)
-    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Property.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Property.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Property.pc @ONLY)
+    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Property.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
   endif ()
 
   if (OGRE_BUILD_COMPONENT_OVERLAY)
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Overlay.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Overlay.pc @ONLY)
-    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Overlay.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Overlay.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Overlay.pc @ONLY)
+    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Overlay.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
   endif ()
 
   if (OGRE_BUILD_COMPONENT_VOLUME)
-    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Volume.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Volume.pc @ONLY)
-    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE-Volume.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
+    configure_file(${OGRE_TEMPLATES_DIR}/OGRE-Volume.pc.in ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Volume.pc @ONLY)
+    install(FILES ${OGRE_BINARY_DIR}/pkgconfig/OGRE19-Volume.pc DESTINATION ${OGRE_LIB_DIRECTORY}/pkgconfig)
   endif ()
 
   if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
diff --git a/CMake/InstallResources.cmake b/CMake/InstallResources.cmake
index ae7bfa1f2c..5f2a337fa4 100644
--- a/CMake/InstallResources.cmake
+++ b/CMake/InstallResources.cmake
@@ -46,16 +46,16 @@ elseif (APPLE)
   set(OGRE_SAMPLES_DIR_DBG "")
   set(OGRE_CFG_INSTALL_PATH "bin")
 elseif (UNIX)
-  set(OGRE_MEDIA_PATH "share/OGRE/Media")
+  set(OGRE_MEDIA_PATH "share/OGRE19/Media")
   set(OGRE_MEDIA_DIR_REL "${CMAKE_INSTALL_PREFIX}/${OGRE_MEDIA_PATH}")
   set(OGRE_MEDIA_DIR_DBG "${CMAKE_INSTALL_PREFIX}/${OGRE_MEDIA_PATH}")
   set(OGRE_TEST_MEDIA_DIR_REL "${CMAKE_INSTALL_PREFIX}/Tests/Media")
   set(OGRE_TEST_MEDIA_DIR_DBG "${CMAKE_INSTALL_PREFIX}/Tests/Media")
-  set(OGRE_PLUGIN_DIR_REL "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE")
-  set(OGRE_PLUGIN_DIR_DBG "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE")
-  set(OGRE_SAMPLES_DIR_REL "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE/Samples")
-  set(OGRE_SAMPLES_DIR_DBG "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE/Samples")
-  set(OGRE_CFG_INSTALL_PATH "share/OGRE")
+  set(OGRE_PLUGIN_DIR_REL "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE19")
+  set(OGRE_PLUGIN_DIR_DBG "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE19")
+  set(OGRE_SAMPLES_DIR_REL "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE19/Samples")
+  set(OGRE_SAMPLES_DIR_DBG "${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE19/Samples")
+  set(OGRE_CFG_INSTALL_PATH "share/OGRE19")
 endif ()
 
 # configure plugins.cfg
diff --git a/CMake/Utils/OgreConfigTargets.cmake b/CMake/Utils/OgreConfigTargets.cmake
index c6b3b40ac0..6238cc22b9 100644
--- a/CMake/Utils/OgreConfigTargets.cmake
+++ b/CMake/Utils/OgreConfigTargets.cmake
@@ -73,9 +73,9 @@ elseif (UNIX)
   if (APPLE)
     set(OGRE_PLUGIN_PATH "/")
   else()
-    set(OGRE_PLUGIN_PATH "/OGRE")
+    set(OGRE_PLUGIN_PATH "/OGRE19")
   endif(APPLE)
-  set(OGRE_SAMPLE_PATH "/OGRE/Samples")
+  set(OGRE_SAMPLE_PATH "/OGRE19/Samples")
 endif ()
 
 # create vcproj.user file for Visual Studio to set debug working directory
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3e99bb09fa..7914f90f24 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -215,10 +215,10 @@ endif (APPLE)
 # Find dependencies
 include(Dependencies)
 # definitions for samples
-set(OGRE_LIBRARIES OgreMain)
-set(OGRE_Paging_LIBRARIES OgrePaging)
-set(OGRE_Terrain_LIBRARIES OgreTerrain)
-set(OGRE_Volume_LIBRARIES OgreVolume)
+set(OGRE_LIBRARIES Ogre19Main)
+set(OGRE_Paging_LIBRARIES Ogre19Paging)
+set(OGRE_Terrain_LIBRARIES Ogre19Terrain)
+set(OGRE_Volume_LIBRARIES Ogre19Volume)
 set(OGRE_Plugin_PCZSceneManager_LIBRARIES Plugin_PCZSceneManager)
 set(OGRE_Plugin_OctreeZone_LIBRARIES Plugin_OctreeZone)
 
@@ -438,8 +438,8 @@ set(OGRE_LIB_DIRECTORY "lib${LIB_SUFFIX}" CACHE STRING "Install path for librari
 if (WIN32)
 	option(OGRE_INSTALL_VSPROPS "Install Visual Studio Property Page." FALSE)
 	if (OGRE_INSTALL_VSPROPS)
-		configure_file(${OGRE_TEMPLATES_DIR}/OGRE.props.in ${OGRE_BINARY_DIR}/OGRE.props)
-		install(FILES ${OGRE_BINARY_DIR}/OGRE.props DESTINATION "${CMAKE_INSTALL_PREFIX}")
+		configure_file(${OGRE_TEMPLATES_DIR}/OGRE.props.in ${OGRE_BINARY_DIR}/OGRE19.props)
+		install(FILES ${OGRE_BINARY_DIR}/OGRE19.props DESTINATION "${CMAKE_INSTALL_PREFIX}")
 	endif ()
 endif ()
 
diff --git a/Components/Overlay/CMakeLists.txt b/Components/Overlay/CMakeLists.txt
index 7767132b24..c83d512665 100644
--- a/Components/Overlay/CMakeLists.txt
+++ b/Components/Overlay/CMakeLists.txt
@@ -11,7 +11,7 @@
 # Overlay optional component
 ############################################################
 
-PROJECT(OgreOverlay)
+PROJECT(Ogre19Overlay)
 
 # define header and source files for the library
 file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
@@ -25,18 +25,18 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 include_directories(${OGRE_SOURCE_DIR}/OgreMain/include)
 
 # setup target
-ogre_add_library(OgreOverlay ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
-set_target_properties(OgreOverlay PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
-target_link_libraries(OgreOverlay OgreMain ${FREETYPE_LIBRARIES})
+ogre_add_library(Ogre19Overlay ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
+set_target_properties(Ogre19Overlay PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
+target_link_libraries(Ogre19Overlay Ogre19Main ${FREETYPE_LIBRARIES})
 if (OGRE_CONFIG_THREADS)
-  target_link_libraries(OgreOverlay ${OGRE_THREAD_LIBRARIES})
+  target_link_libraries(Ogre19Overlay ${OGRE_THREAD_LIBRARIES})
 endif ()
 
 # install 
-ogre_config_framework(OgreOverlay)
-ogre_config_component(OgreOverlay)
+ogre_config_framework(Ogre19Overlay)
+ogre_config_component(Ogre19Overlay)
 
 install(FILES ${HEADER_FILES}
-  DESTINATION include/OGRE/Overlay
+  DESTINATION include/OGRE19/Overlay
 )
 
diff --git a/Components/Paging/CMakeLists.txt b/Components/Paging/CMakeLists.txt
index 29d852c560..5a6b7e9a2a 100644
--- a/Components/Paging/CMakeLists.txt
+++ b/Components/Paging/CMakeLists.txt
@@ -11,7 +11,7 @@
 # Paging optional component
 ############################################################
 
-PROJECT(OgrePaging)
+PROJECT(Ogre19Paging)
 
 # define header and source files for the library
 file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
@@ -25,17 +25,17 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 include_directories(${OGRE_SOURCE_DIR}/OgreMain/include)
 
 # setup target
-ogre_add_library(OgrePaging ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
-set_target_properties(OgrePaging PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
-target_link_libraries(OgrePaging OgreMain)
+ogre_add_library(Ogre19Paging ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
+set_target_properties(Ogre19Paging PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
+target_link_libraries(Ogre19Paging Ogre19Main)
 if (OGRE_CONFIG_THREADS)
-  target_link_libraries(OgrePaging ${OGRE_THREAD_LIBRARIES})
+  target_link_libraries(Ogre19Paging ${OGRE_THREAD_LIBRARIES})
 endif ()
 
 # install 
-ogre_config_framework(OgrePaging)
-ogre_config_component(OgrePaging)
+ogre_config_framework(Ogre19Paging)
+ogre_config_component(Ogre19Paging)
 
 install(FILES ${HEADER_FILES}
-  DESTINATION include/OGRE/Paging
+  DESTINATION include/OGRE19/Paging
 )
diff --git a/Components/Property/CMakeLists.txt b/Components/Property/CMakeLists.txt
index 9cc1ccb995..c148bfe316 100644
--- a/Components/Property/CMakeLists.txt
+++ b/Components/Property/CMakeLists.txt
@@ -11,7 +11,7 @@
 # Paging optional component
 ############################################################
 
-PROJECT(OgreProperty)
+PROJECT(Ogre19Property)
 
 # define header and source files for the library
 set (HEADER_FILES
@@ -33,18 +33,18 @@ include_directories(${OGRE_SOURCE_DIR}/OgreMain/include)
 include_directories(${Boost_INCLUDE_DIRS})
 
 # setup target
-ogre_add_library(OgreProperty ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
-set_target_properties(OgreProperty PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
-target_link_libraries(OgreProperty OgreMain)
+ogre_add_library(Ogre19Property ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
+set_target_properties(Ogre19Property PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
+target_link_libraries(Ogre19Property Ogre19Main)
 if (OGRE_CONFIG_THREADS)
-  target_link_libraries(OgreProperty ${OGRE_THREAD_LIBRARIES})
+  target_link_libraries(Ogre19Property ${OGRE_THREAD_LIBRARIES})
 endif ()
 
 # install 
-ogre_config_framework(OgreProperty)
-ogre_config_component(OgreProperty)
+ogre_config_framework(Ogre19Property)
+ogre_config_component(Ogre19Property)
 
 install(FILES ${HEADER_FILES}
-  DESTINATION include/OGRE/Property
+  DESTINATION include/OGRE19/Property
 )
 
diff --git a/Components/RTShaderSystem/CMakeLists.txt b/Components/RTShaderSystem/CMakeLists.txt
index 7db9349730..c5a9bc8bb4 100644
--- a/Components/RTShaderSystem/CMakeLists.txt
+++ b/Components/RTShaderSystem/CMakeLists.txt
@@ -9,20 +9,20 @@
 
 # Configure Ogre RTShader System build
 
-PROJECT(OgreRTShaderSystem)
+PROJECT(Ogre19RTShaderSystem)
 
 file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
 file(GLOB SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp")
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 
-ogre_add_library(OgreRTShaderSystem ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
-set_target_properties(OgreRTShaderSystem PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
-target_link_libraries(OgreRTShaderSystem OgreMain)
+ogre_add_library(Ogre19RTShaderSystem ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
+set_target_properties(Ogre19RTShaderSystem PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
+target_link_libraries(Ogre19RTShaderSystem Ogre19Main)
 
-ogre_config_framework(OgreRTShaderSystem)
-ogre_config_component(OgreRTShaderSystem)
+ogre_config_framework(Ogre19RTShaderSystem)
+ogre_config_component(Ogre19RTShaderSystem)
 
 install(FILES ${HEADER_FILES}
-  DESTINATION include/OGRE/RTShaderSystem
+  DESTINATION include/OGRE19/RTShaderSystem
 )
diff --git a/Components/Terrain/CMakeLists.txt b/Components/Terrain/CMakeLists.txt
index 8c02386074..75487ec45e 100644
--- a/Components/Terrain/CMakeLists.txt
+++ b/Components/Terrain/CMakeLists.txt
@@ -11,7 +11,7 @@
 # Terrain optional component
 ############################################################
 
-PROJECT(OgreTerrain)
+PROJECT(Ogre19Terrain)
 
 # define header and source files for the library
 file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
@@ -44,22 +44,22 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 include_directories(${OGRE_SOURCE_DIR}/OgreMain/include)
 
 # setup target
-ogre_add_library(OgreTerrain ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
-set_target_properties(OgreTerrain PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
-target_link_libraries(OgreTerrain OgreMain)
+ogre_add_library(Ogre19Terrain ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
+set_target_properties(Ogre19Terrain PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
+target_link_libraries(Ogre19Terrain Ogre19Main)
 if (OGRE_BUILD_COMPONENT_PAGING)
-	target_link_libraries(OgreTerrain OgrePaging)
+	target_link_libraries(Ogre19Terrain Ogre19Paging)
 endif ()
 if (OGRE_CONFIG_THREADS)
-  target_link_libraries(OgreTerrain ${OGRE_THREAD_LIBRARIES})
+  target_link_libraries(Ogre19Terrain ${OGRE_THREAD_LIBRARIES})
 endif ()
 
 
 # install 
-ogre_config_framework(OgreTerrain)
-ogre_config_component(OgreTerrain)
+ogre_config_framework(Ogre19Terrain)
+ogre_config_component(Ogre19Terrain)
 
 install(FILES ${HEADER_FILES}
-  DESTINATION include/OGRE/Terrain
+  DESTINATION include/OGRE19/Terrain
 )
 
diff --git a/Components/Volume/CMakeLists.txt b/Components/Volume/CMakeLists.txt
index 74e801d2c1..c7af48e906 100644
--- a/Components/Volume/CMakeLists.txt
+++ b/Components/Volume/CMakeLists.txt
@@ -11,7 +11,7 @@
 # Volume optional component
 ############################################################
 
-PROJECT(OgreVolume)
+PROJECT(Ogre19Volume)
 
 # define header and source files for the library
 file(GLOB HEADER_FILES "${CMAKE_CURRENT_SOURCE_DIR}/include/*.h")
@@ -25,19 +25,19 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 include_directories(${OGRE_SOURCE_DIR}/OgreMain/include)
 
 # setup target
-ogre_add_library(OgreVolume ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
-set_target_properties(OgreVolume PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
-target_link_libraries(OgreVolume OgreMain)
+ogre_add_library(Ogre19Volume ${OGRE_COMP_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADER_FILES} ${PLATFORM_SOURCE_FILES})
+set_target_properties(Ogre19Volume PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
+target_link_libraries(Ogre19Volume Ogre19Main)
 if (OGRE_CONFIG_THREADS)
-  target_link_libraries(OgreVolume ${OGRE_THREAD_LIBRARIES})
+  target_link_libraries(Ogre19Volume ${OGRE_THREAD_LIBRARIES})
 endif ()
 
 
 # install 
-ogre_config_framework(OgreVolume)
-ogre_config_component(OgreVolume)
+ogre_config_framework(Ogre19Volume)
+ogre_config_component(Ogre19Volume)
 
 install(FILES ${HEADER_FILES}
-  DESTINATION include/OGRE/Volume
+  DESTINATION include/OGRE19/Volume
 )
 
diff --git a/Docs/CMakeLists.txt b/Docs/CMakeLists.txt
index c39e549b52..b0c570341c 100644
--- a/Docs/CMakeLists.txt
+++ b/Docs/CMakeLists.txt
@@ -16,7 +16,7 @@
 if (WIN32 OR APPLE)
   set(OGRE_DOCS_PATH "Docs")
 elseif (UNIX)
-  set(OGRE_DOCS_PATH "share/OGRE/docs")
+  set(OGRE_DOCS_PATH "share/OGRE19/docs")
 endif ()
   
 if (OGRE_INSTALL_DOCS)
diff --git a/OgreMain/CMakeLists.txt b/OgreMain/CMakeLists.txt
index 6a433783f2..bc30c29c3b 100644
--- a/OgreMain/CMakeLists.txt
+++ b/OgreMain/CMakeLists.txt
@@ -11,7 +11,7 @@
 # OgreMain core library
 ############################################################
 
-PROJECT(OgreMain)
+PROJECT(Ogre19Main)
 
 include(PrecompiledHeader)
 
@@ -275,19 +275,19 @@ set (TARGET_LINK_FLAGS "")
 # setup OgreMain target
 if (OGRE_BUILD_PLATFORM_WINRT OR OGRE_BUILD_PLATFORM_WINDOWS_PHONE)
 	# exclude OgreTimer.cpp from unity builds; causes problem
-	ogre_add_library(OgreMain ${OGRE_LIB_TYPE} ${PREC_HEADER} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADERS} ${PLATFORM_SOURCE_FILES} ${THREAD_HEADER_FILES} ${THREAD_SOURCE_FILES} SEPARATE "src/WIN32/OgreTimer.cpp")
+	ogre_add_library(Ogre19Main ${OGRE_LIB_TYPE} ${PREC_HEADER} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADERS} ${PLATFORM_SOURCE_FILES} ${THREAD_HEADER_FILES} ${THREAD_SOURCE_FILES} SEPARATE "src/WIN32/OgreTimer.cpp")
 else ()
 	# exclude OgreAlignedAllocator.cpp from unity builds; causes problems on Linux
-	ogre_add_library(OgreMain ${OGRE_LIB_TYPE} ${PREC_HEADER} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADERS} ${PLATFORM_SOURCE_FILES} ${THREAD_HEADER_FILES} ${THREAD_SOURCE_FILES} SEPARATE "src/OgreAlignedAllocator.cpp")
+	ogre_add_library(Ogre19Main ${OGRE_LIB_TYPE} ${PREC_HEADER} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADERS} ${PLATFORM_SOURCE_FILES} ${THREAD_HEADER_FILES} ${THREAD_SOURCE_FILES} SEPARATE "src/OgreAlignedAllocator.cpp")
 endif ()
 # In visual studio 2010 - 64 bit we get this error: "LINK : fatal error LNK1210: exceeded internal ILK size limit; link with /INCREMENTAL:NO"
 if(WIN32 AND MSVC10 AND CMAKE_CL_64)
-  set_target_properties(OgreMain PROPERTIES 
+  set_target_properties(Ogre19Main PROPERTIES 
                         VERSION ${OGRE_SOVERSION}
                         LINK_FLAGS "/INCREMENTAL:NO"
                       )
 else()
-  set_target_properties(OgreMain PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
+  set_target_properties(Ogre19Main PROPERTIES VERSION ${OGRE_SOVERSION} SOVERSION ${OGRE_SOVERSION})
 endif()
 
 if(OGRE_GCC_VERSION VERSION_EQUAL 4.8 OR OGRE_GCC_VERSION VERSION_GREATER 4.8)
@@ -296,15 +296,15 @@ endif()
 
 if (APPLE)
   if (OGRE_BUILD_PLATFORM_APPLE_IOS)
-    set_target_properties(OgreMain PROPERTIES INSTALL_NAME_DIR "OGRE")
+    set_target_properties(Ogre19Main PROPERTIES INSTALL_NAME_DIR "OGRE")
   else ()
-    set_target_properties(OgreMain PROPERTIES
+    set_target_properties(Ogre19Main PROPERTIES
         LINK_FLAGS "-framework IOKit -framework Cocoa -framework Carbon -framework OpenGL -framework CoreVideo"
     )
 
     set(OGRE_OSX_BUILD_CONFIGURATION "$(PLATFORM_NAME)/$(CONFIGURATION)")
   
-  	add_custom_command(TARGET OgreMain POST_BUILD
+  	add_custom_command(TARGET Ogre19Main POST_BUILD
 		COMMAND mkdir ARGS -p ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/Threading
         COMMAND ditto 
 		${OGRE_SOURCE_DIR}/OgreMain/include/Threading/*.h ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/Threading
@@ -317,7 +317,7 @@ if (APPLE)
     foreach(HEADER_PATH ${THREAD_HEADER_FILES})
         get_filename_component(HEADER_FILE ${HEADER_PATH} NAME)
         set(FWK_HEADER_PATH ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/${HEADER_FILE})
-        add_custom_command(TARGET OgreMain POST_BUILD
+        add_custom_command(TARGET Ogre19Main POST_BUILD
             COMMAND rm -f ${FWK_HEADER_PATH}
             )
     endforeach()
@@ -325,37 +325,37 @@ if (APPLE)
     foreach(HEADER_PATH ${PLATFORM_HEADERS})
         get_filename_component(HEADER_FILE ${HEADER_PATH} NAME)
         set(FWK_HEADER_PATH ${OGRE_BINARY_DIR}/lib/${OGRE_OSX_BUILD_CONFIGURATION}/Ogre.framework/Headers/${HEADER_FILE})
-        add_custom_command(TARGET OgreMain POST_BUILD
+        add_custom_command(TARGET Ogre19Main POST_BUILD
             COMMAND rm -f ${FWK_HEADER_PATH}
             )
     endforeach()
 
-    ogre_config_framework(OgreMain)
+    ogre_config_framework(Ogre19Main)
   endif ()
 
   # Framework is called 'Ogre'
-  set_target_properties(OgreMain PROPERTIES	OUTPUT_NAME Ogre)
+  set_target_properties(Ogre19Main PROPERTIES	OUTPUT_NAME Ogre)
 endif ()
-target_link_libraries(OgreMain ${LIBRARIES})
+target_link_libraries(Ogre19Main ${LIBRARIES})
 if (MINGW)
   # may need winsock htons functions for FreeImage
-  target_link_libraries(OgreMain ws2_32)
+  target_link_libraries(Ogre19Main ws2_32)
 endif ()
 
 # specify a precompiled header to use
-use_precompiled_header(OgreMain 
+use_precompiled_header(Ogre19Main 
   "${CMAKE_CURRENT_SOURCE_DIR}/include/OgreStableHeaders.h"
   "${CMAKE_CURRENT_SOURCE_DIR}/src/OgrePrecompiledHeaders.cpp"
 )
 
 # install OgreMain
-ogre_config_lib(OgreMain TRUE)
+ogre_config_lib(Ogre19Main TRUE)
 install(FILES ${HEADER_FILES}
-  DESTINATION include/OGRE
+  DESTINATION include/OGRE19
 )
 install(FILES ${PLATFORM_HEADERS}
-  DESTINATION include/OGRE/${PLATFORM_HEADER_INSTALL}
+  DESTINATION include/OGRE19/${PLATFORM_HEADER_INSTALL}
 )
 install(FILES ${THREAD_HEADER_FILES}
-	DESTINATION include/OGRE/Threading
+	DESTINATION include/OGRE19/Threading
 )
diff --git a/PlugIns/BSPSceneManager/CMakeLists.txt b/PlugIns/BSPSceneManager/CMakeLists.txt
index 33b29d9308..5b33fd7fd6 100644
--- a/PlugIns/BSPSceneManager/CMakeLists.txt
+++ b/PlugIns/BSPSceneManager/CMakeLists.txt
@@ -16,7 +16,7 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 add_definitions(-D_USRDLL)
 
 ogre_add_library(Plugin_BSPSceneManager ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
-target_link_libraries(Plugin_BSPSceneManager OgreMain)
+target_link_libraries(Plugin_BSPSceneManager Ogre19Main)
 if (NOT OGRE_STATIC)
   set_target_properties(Plugin_BSPSceneManager PROPERTIES
     COMPILE_DEFINITIONS OGRE_BSPPLUGIN_EXPORTS
@@ -25,6 +25,6 @@ endif ()
 
 ogre_config_framework(Plugin_BSPSceneManager)
 
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/Plugins/BSPSceneManager)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/Plugins/BSPSceneManager)
 
 ogre_config_plugin(Plugin_BSPSceneManager)
diff --git a/PlugIns/CgProgramManager/CMakeLists.txt b/PlugIns/CgProgramManager/CMakeLists.txt
index 4b6a393c09..f2c70f6b5c 100644
--- a/PlugIns/CgProgramManager/CMakeLists.txt
+++ b/PlugIns/CgProgramManager/CMakeLists.txt
@@ -16,7 +16,7 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${Cg_INCLUDE_DIRS})
 add_definitions(-D_USRDLL)
 
 ogre_add_library(Plugin_CgProgramManager ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
-target_link_libraries(Plugin_CgProgramManager OgreMain ${Cg_LIBRARIES})
+target_link_libraries(Plugin_CgProgramManager Ogre19Main ${Cg_LIBRARIES})
 if (NOT OGRE_STATIC)
   set_target_properties(Plugin_CgProgramManager PROPERTIES
     COMPILE_DEFINITIONS OGRE_CGPLUGIN_EXPORTS
@@ -26,4 +26,4 @@ endif (NOT OGRE_STATIC)
 ogre_config_framework(Plugin_CgProgramManager)
 
 ogre_config_plugin(Plugin_CgProgramManager)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/Plugins/CgProgramManager)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/Plugins/CgProgramManager)
diff --git a/PlugIns/OctreeSceneManager/CMakeLists.txt b/PlugIns/OctreeSceneManager/CMakeLists.txt
index 3d30fc3e97..90c29b6834 100644
--- a/PlugIns/OctreeSceneManager/CMakeLists.txt
+++ b/PlugIns/OctreeSceneManager/CMakeLists.txt
@@ -16,7 +16,7 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 add_definitions(-D_USRDLL)
 
 ogre_add_library(Plugin_OctreeSceneManager ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
-target_link_libraries(Plugin_OctreeSceneManager OgreMain)
+target_link_libraries(Plugin_OctreeSceneManager Ogre19Main)
 if (NOT OGRE_STATIC)
   set_target_properties(Plugin_OctreeSceneManager PROPERTIES
     COMPILE_DEFINITIONS OGRE_OCTREEPLUGIN_EXPORTS
@@ -26,4 +26,4 @@ endif ()
 ogre_config_framework(Plugin_OctreeSceneManager)
 
 ogre_config_plugin(Plugin_OctreeSceneManager)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/Plugins/OctreeSceneManager)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/Plugins/OctreeSceneManager)
diff --git a/PlugIns/OctreeZone/CMakeLists.txt b/PlugIns/OctreeZone/CMakeLists.txt
index 64f609b3c3..b9a3927efe 100644
--- a/PlugIns/OctreeZone/CMakeLists.txt
+++ b/PlugIns/OctreeZone/CMakeLists.txt
@@ -17,7 +17,7 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../PCZSceneManager/include)
 add_definitions(-D_USRDLL)
 
 ogre_add_library(Plugin_OctreeZone ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
-target_link_libraries(Plugin_OctreeZone OgreMain Plugin_PCZSceneManager)
+target_link_libraries(Plugin_OctreeZone Ogre19Main Plugin_PCZSceneManager)
 if (NOT OGRE_STATIC)
   set_property(TARGET Plugin_OctreeZone PROPERTY
     COMPILE_DEFINITIONS OGRE_OCTREEZONEPLUGIN_EXPORTS)
@@ -27,11 +27,11 @@ endif ()
 # to find the PCZSceneManager library
 if (UNIX)
   set_property(TARGET Plugin_OctreeZone APPEND PROPERTY
-    INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE
+    INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${OGRE_LIB_DIRECTORY}/OGRE19
   )
 endif ()
 
 ogre_config_framework(Plugin_OctreeZone)
 
 ogre_config_plugin(Plugin_OctreeZone)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/Plugins/OctreeZone)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/Plugins/OctreeZone)
diff --git a/PlugIns/PCZSceneManager/CMakeLists.txt b/PlugIns/PCZSceneManager/CMakeLists.txt
index f972ba6ba9..0775e87726 100644
--- a/PlugIns/PCZSceneManager/CMakeLists.txt
+++ b/PlugIns/PCZSceneManager/CMakeLists.txt
@@ -16,7 +16,7 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 add_definitions(-D_USRDLL)
 
 ogre_add_library(Plugin_PCZSceneManager ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
-target_link_libraries(Plugin_PCZSceneManager OgreMain)
+target_link_libraries(Plugin_PCZSceneManager Ogre19Main)
 if (NOT OGRE_STATIC)
   set_target_properties(Plugin_PCZSceneManager PROPERTIES
     COMPILE_DEFINITIONS OGRE_PCZPLUGIN_EXPORTS
@@ -26,4 +26,4 @@ endif ()
 ogre_config_framework(Plugin_PCZSceneManager)
 
 ogre_config_plugin(Plugin_PCZSceneManager)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/Plugins/PCZSceneManager)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/Plugins/PCZSceneManager)
diff --git a/PlugIns/ParticleFX/CMakeLists.txt b/PlugIns/ParticleFX/CMakeLists.txt
index 2511e3c3ef..e20a4bf9f0 100644
--- a/PlugIns/ParticleFX/CMakeLists.txt
+++ b/PlugIns/ParticleFX/CMakeLists.txt
@@ -17,7 +17,7 @@ include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 add_definitions(-D_USRDLL)
 
 ogre_add_library(Plugin_ParticleFX ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES})
-target_link_libraries(Plugin_ParticleFX OgreMain)
+target_link_libraries(Plugin_ParticleFX Ogre19Main)
 if (NOT OGRE_STATIC)
   set_target_properties(Plugin_ParticleFX PROPERTIES
     COMPILE_DEFINITIONS OGRE_PARTICLEFXPLUGIN_EXPORTS
@@ -27,5 +27,5 @@ endif ()
 ogre_config_framework(Plugin_ParticleFX)
 
 ogre_config_plugin(Plugin_ParticleFX)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/Plugins/ParticleFX)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/Plugins/ParticleFX)
 
diff --git a/RenderSystems/Direct3D11/CMakeLists.txt b/RenderSystems/Direct3D11/CMakeLists.txt
index 1a8e21c769..3bf750106f 100644
--- a/RenderSystems/Direct3D11/CMakeLists.txt
+++ b/RenderSystems/Direct3D11/CMakeLists.txt
@@ -36,4 +36,4 @@ if (OGRE_CONFIG_THREADS)
 endif ()
 
 ogre_config_plugin(RenderSystem_Direct3D11)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/RenderSystems/Direct3D11)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/RenderSystems/Direct3D11)
diff --git a/RenderSystems/Direct3D9/CMakeLists.txt b/RenderSystems/Direct3D9/CMakeLists.txt
index 201ee66a40..e3aa5330e9 100644
--- a/RenderSystems/Direct3D9/CMakeLists.txt
+++ b/RenderSystems/Direct3D9/CMakeLists.txt
@@ -37,4 +37,4 @@ if (OGRE_CONFIG_THREADS)
 endif ()
 
 ogre_config_plugin(RenderSystem_Direct3D9)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/RenderSystems/Direct3D9)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/RenderSystems/Direct3D9)
diff --git a/RenderSystems/GL/CMakeLists.txt b/RenderSystems/GL/CMakeLists.txt
index d1afd2bc8b..c346a379a6 100644
--- a/RenderSystems/GL/CMakeLists.txt
+++ b/RenderSystems/GL/CMakeLists.txt
@@ -96,7 +96,7 @@ endif()
 #Note that in the next row SOURCE_FILES are added last. This is to prevent compilation problems of unity build found on Windows Visual Studio. 
 #In this situation any file added after the "glew.cpp" file, which belongs to the SOURCE_FILES package, does not compile
 ogre_add_library(RenderSystem_GL ${OGRE_LIB_TYPE} ${HEADER_FILES} ${GLSL_SOURCE} ${ATIFS_SOURCE} ${NVPARSE_SOURCE} ${PLATFORM_HEADERS} ${PLATFORM_SOURCES} ${SOURCE_FILES})
-target_link_libraries(RenderSystem_GL OgreMain ${OPENGL_LIBRARIES} ${PLATFORM_LIBS})
+target_link_libraries(RenderSystem_GL Ogre19Main ${OPENGL_LIBRARIES} ${PLATFORM_LIBS})
 
 if (NOT OGRE_STATIC)
   set_target_properties(RenderSystem_GL PROPERTIES
@@ -115,7 +115,7 @@ endif ()
 ogre_config_framework(RenderSystem_GL)
 
 ogre_config_plugin(RenderSystem_GL)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/RenderSystems/GL)
-install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE/RenderSystems/GL/${PLATFORM_HEADER_INSTALL})
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/GL DESTINATION include/OGRE/RenderSystems/GL)
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/GLSL/include/ DESTINATION include/OGRE/RenderSystems/GL)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/RenderSystems/GL)
+install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE19/RenderSystems/GL/${PLATFORM_HEADER_INSTALL})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/GL DESTINATION include/OGRE19/RenderSystems/GL)
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/GLSL/include/ DESTINATION include/OGRE19/RenderSystems/GL)
diff --git a/RenderSystems/GL3Plus/CMakeLists.txt b/RenderSystems/GL3Plus/CMakeLists.txt
index 3ce9607dbd..16642b7ff3 100644
--- a/RenderSystems/GL3Plus/CMakeLists.txt
+++ b/RenderSystems/GL3Plus/CMakeLists.txt
@@ -60,7 +60,7 @@ if (UNIX AND NOT APPLE)
 else()
   ogre_add_library(RenderSystem_GL3Plus ${OGRE_LIB_TYPE} ${HEADER_FILES} ${GLSL_SOURCE} ${PLATFORM_HEADERS} ${PLATFORM_SOURCES} ${SOURCE_FILES})
 endif()
-target_link_libraries(RenderSystem_GL3Plus OgreMain ${OPENGL_LIBRARIES} ${PLATFORM_LIBS})
+target_link_libraries(RenderSystem_GL3Plus Ogre19Main ${OPENGL_LIBRARIES} ${PLATFORM_LIBS})
 
 if (NOT OGRE_STATIC)
   set_target_properties(RenderSystem_GL3Plus PROPERTIES
@@ -79,7 +79,7 @@ endif ()
 ogre_config_framework(RenderSystem_GL3Plus)
 
 ogre_config_plugin(RenderSystem_GL3Plus)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/RenderSystems/GL3Plus)
-install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE/RenderSystems/GL3Plus/${PLATFORM_HEADER_INSTALL})
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include DESTINATION include/OGRE/RenderSystems/GL3Plus)
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/GLSL/include/ DESTINATION include/OGRE/RenderSystems/GL3Plus)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/RenderSystems/GL3Plus)
+install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE19/RenderSystems/GL3Plus/${PLATFORM_HEADER_INSTALL})
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include DESTINATION include/OGRE19/RenderSystems/GL3Plus)
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/GLSL/include/ DESTINATION include/OGRE19/RenderSystems/GL3Plus)
diff --git a/RenderSystems/GLES/CMakeLists.txt b/RenderSystems/GLES/CMakeLists.txt
index e58708b03c..3c9fb51b04 100644
--- a/RenderSystems/GLES/CMakeLists.txt
+++ b/RenderSystems/GLES/CMakeLists.txt
@@ -69,7 +69,7 @@ include_directories(
 )
 
 ogre_add_library(RenderSystem_GLES ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${PLATFORM_HEADERS} ${PLATFORM_SOURCES})
-target_link_libraries(RenderSystem_GLES OgreMain ${OPENGLES_LIBRARIES} ${PLATFORM_LIBS})
+target_link_libraries(RenderSystem_GLES Ogre19Main ${OPENGLES_LIBRARIES} ${PLATFORM_LIBS})
 
 if (NOT OGRE_STATIC)
   set_target_properties(RenderSystem_GLES PROPERTIES
@@ -82,5 +82,5 @@ if (OGRE_CONFIG_THREADS)
 endif ()
 
 ogre_config_plugin(RenderSystem_GLES)
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/RenderSystems/GLES)
-install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE/RenderSystems/GLES/${PLATFORM_HEADER_INSTALL})
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/RenderSystems/GLES)
+install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE19/RenderSystems/GLES/${PLATFORM_HEADER_INSTALL})
diff --git a/RenderSystems/GLES2/CMakeLists.txt b/RenderSystems/GLES2/CMakeLists.txt
index 1bab924544..d0dbafdb20 100755
--- a/RenderSystems/GLES2/CMakeLists.txt
+++ b/RenderSystems/GLES2/CMakeLists.txt
@@ -127,7 +127,7 @@ include_directories(
 )
 
 ogre_add_library(RenderSystem_GLES2 ${OGRE_LIB_TYPE} ${HEADER_FILES} ${SOURCE_FILES} ${STATECACHE_HEADERS} ${GLESW_HEADERS} ${KHR_HEADERS} ${GLSLES_FILES} ${PLATFORM_HEADERS} ${PLATFORM_SOURCES})
-target_link_libraries(RenderSystem_GLES2 OgreMain ${OPENGLES3_LIBRARIES} ${OPENGLES2_LIBRARIES} ${EGL_LIBRARIES} ${PLATFORM_LIBS})
+target_link_libraries(RenderSystem_GLES2 Ogre19Main ${OPENGLES3_LIBRARIES} ${OPENGLES2_LIBRARIES} ${EGL_LIBRARIES} ${PLATFORM_LIBS})
 
 if (NOT OGRE_STATIC)
   set_target_properties(RenderSystem_GLES2 PROPERTIES
@@ -141,9 +141,9 @@ endif ()
 
 ogre_config_plugin(RenderSystem_GLES2)
 
-install(FILES ${HEADER_FILES} DESTINATION include/OGRE/RenderSystems/GLES2)
-install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE/RenderSystems/GLES2/${PLATFORM_HEADER_INSTALL})
-install(FILES ${GLESW_HEADERS} DESTINATION include/OGRE/RenderSystems/GLES2/${GLESW_HEADER_INSTALL})
-install(FILES ${KHR_HEADERS} DESTINATION include/OGRE/RenderSystems/GLES2/KHR)
-install(FILES ${STATECACHE_HEADERS} DESTINATION include/OGRE/RenderSystems/GLES2/StateCacheManager)
-install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/GLSLES/include/ DESTINATION include/OGRE/RenderSystems/GLES2/GLSLES)
+install(FILES ${HEADER_FILES} DESTINATION include/OGRE19/RenderSystems/GLES2)
+install(FILES ${PLATFORM_HEADERS} DESTINATION include/OGRE19/RenderSystems/GLES2/${PLATFORM_HEADER_INSTALL})
+install(FILES ${GLESW_HEADERS} DESTINATION include/OGRE19/RenderSystems/GLES2/${GLESW_HEADER_INSTALL})
+install(FILES ${KHR_HEADERS} DESTINATION include/OGRE19/RenderSystems/GLES2/KHR)
+install(FILES ${STATECACHE_HEADERS} DESTINATION include/OGRE19/RenderSystems/GLES2/StateCacheManager)
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/GLSLES/include/ DESTINATION include/OGRE19/RenderSystems/GLES2/GLSLES)
diff --git a/Samples/CMakeLists.txt b/Samples/CMakeLists.txt
index 8719410c2e..6ff5274512 100644
--- a/Samples/CMakeLists.txt
+++ b/Samples/CMakeLists.txt
@@ -198,7 +198,7 @@ if (OGRE_INSTALL_SAMPLES_SOURCE)
   if (WIN32 OR APPLE)
     set(OGRE_SAMPLES_DIR Samples)
   elseif (UNIX)
-    set(OGRE_SAMPLES_DIR share/OGRE/Samples)
+    set(OGRE_SAMPLES_DIR share/OGRE19/Samples)
   endif ()
   install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/ DESTINATION ${OGRE_SAMPLES_DIR}
     REGEX "^CMakeLists.txt$" EXCLUDE
@@ -220,7 +220,7 @@ endif ()
 # Install sample headers, some people rely on these
 file(GLOB SAMPLE_COMMON_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/Common/include/*.h")
 install(FILES ${SAMPLE_COMMON_HEADERS}
-		DESTINATION include/OGRE)
+		DESTINATION include/OGRE19)
 		
 if (MSVC)
   find_package(Wix)
diff --git a/Samples/Media/CMakeLists.txt b/Samples/Media/CMakeLists.txt
index bdcf6a10c5..2c13ae7448 100644
--- a/Samples/Media/CMakeLists.txt
+++ b/Samples/Media/CMakeLists.txt
@@ -17,7 +17,7 @@ if (WIN32)
 elseif (APPLE)
   set(OGRE_MEDIA_PATH "Media")
 elseif (UNIX)
-  set(OGRE_MEDIA_PATH "share/OGRE/Media")
+  set(OGRE_MEDIA_PATH "share/OGRE19/Media")
 endif ()
 
 install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
diff --git a/Tools/MeshUpgrader/CMakeLists.txt b/Tools/MeshUpgrader/CMakeLists.txt
index f2d7930c7e..7b3b75e4fc 100644
--- a/Tools/MeshUpgrader/CMakeLists.txt
+++ b/Tools/MeshUpgrader/CMakeLists.txt
@@ -13,12 +13,12 @@ set(SOURCE_FILES
   src/main.cpp
 )
 
-ogre_add_executable(OgreMeshUpgrader ${SOURCE_FILES})
-target_link_libraries(OgreMeshUpgrader ${OGRE_LIBRARIES})
+ogre_add_executable(Ogre19MeshUpgrader ${SOURCE_FILES})
+target_link_libraries(Ogre19MeshUpgrader ${OGRE_LIBRARIES})
 
 if (APPLE)
-    set_target_properties(OgreMeshUpgrader PROPERTIES
+    set_target_properties(Ogre19MeshUpgrader PROPERTIES
         LINK_FLAGS "-framework Cocoa")
 endif ()
 
-ogre_config_tool(OgreMeshUpgrader)
+ogre_config_tool(Ogre19MeshUpgrader)
diff --git a/Tools/XMLConverter/CMakeLists.txt b/Tools/XMLConverter/CMakeLists.txt
index a806d84c98..6b2b2c242a 100644
--- a/Tools/XMLConverter/CMakeLists.txt
+++ b/Tools/XMLConverter/CMakeLists.txt
@@ -39,12 +39,12 @@ endif(NOT TINYXML_FOUND)
 
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include ${TINYXML_INCLUDE_DIR})
 add_definitions(-DTIXML_USE_STL)
-ogre_add_executable(OgreXMLConverter ${HEADER_FILES} ${SOURCE_FILES})
-target_link_libraries(OgreXMLConverter ${OGRE_LIBRARIES} ${TINYXML_LIBRARIES})
+ogre_add_executable(Ogre19XMLConverter ${HEADER_FILES} ${SOURCE_FILES})
+target_link_libraries(Ogre19XMLConverter ${OGRE_LIBRARIES} ${TINYXML_LIBRARIES})
 
 if (APPLE)
-    set_target_properties(OgreXMLConverter PROPERTIES
+    set_target_properties(Ogre19XMLConverter PROPERTIES
         LINK_FLAGS "-framework Cocoa")
 endif ()
 
-ogre_config_tool(OgreXMLConverter)
+ogre_config_tool(Ogre19XMLConverter)
Index: git/CMake/Templates/OGREConfig.cmake.in
===================================================================
--- git.orig/CMake/Templates/OGREConfig.cmake.in
+++ git/CMake/Templates/OGREConfig.cmake.in
@@ -20,7 +20,7 @@ include(FindPackageMessage)
 
 set(OGRE_PREFIX_DIR "@CMAKE_INSTALL_PREFIX@")
 get_filename_component(OGRE_LIBRARY_DIRS "${OGRE_PREFIX_DIR}/lib" ABSOLUTE)
-get_filename_component(OGRE_INCLUDE_DIRS "${OGRE_PREFIX_DIR}/include/OGRE" ABSOLUTE)
+get_filename_component(OGRE_INCLUDE_DIRS "${OGRE_PREFIX_DIR}/include/OGRE19" ABSOLUTE)
 set(OGRE_LIBRARIES "OgreMain")
 
 message(STATUS "Found OGRE")
Index: git/OgreMain/src/GLX/OgreFileSystemLayer.cpp
===================================================================
--- git.orig/OgreMain/src/GLX/OgreFileSystemLayer.cpp
+++ git/OgreMain/src/GLX/OgreFileSystemLayer.cpp
@@ -107,9 +107,9 @@ namespace Ogre
 		// use application path as first config search path
 		mConfigPaths.push_back(appPath + '/');
 		// then search inside ../share/OGRE
-		mConfigPaths.push_back(appPath + "/../share/OGRE/");
+		mConfigPaths.push_back(appPath + "/../share/OGRE19/");
 		// then try system wide /etc
-		mConfigPaths.push_back("/etc/OGRE/");
+		mConfigPaths.push_back("/etc/OGRE19/");
 	}
     //---------------------------------------------------------------------
 	void FileSystemLayer::prepareUserHome(const Ogre::String& subdir)
Index: git/OgreMain/src/gtk/OgreFileSystemLayer.cpp
===================================================================
--- git.orig/OgreMain/src/gtk/OgreFileSystemLayer.cpp
+++ git/OgreMain/src/gtk/OgreFileSystemLayer.cpp
@@ -107,9 +107,9 @@ namespace Ogre
 		// use application path as first config search path
 		mConfigPaths.push_back(appPath + '/');
 		// then search inside ../share/OGRE
-		mConfigPaths.push_back(appPath + "/../share/OGRE/");
+		mConfigPaths.push_back(appPath + "/../share/OGRE19/");
 		// then try system wide /etc
-		mConfigPaths.push_back("/etc/OGRE/");
+		mConfigPaths.push_back("/etc/OGRE19/");
 	}
     //---------------------------------------------------------------------
 	void FileSystemLayer::prepareUserHome(const Ogre::String& subdir)
Index: git/CMake/Packages/FindOGRE.cmake
===================================================================
--- git.orig/CMake/Packages/FindOGRE.cmake
+++ /dev/null
@@ -1,584 +0,0 @@
-#-------------------------------------------------------------------
-# This file is part of the CMake build system for OGRE
-#     (Object-oriented Graphics Rendering Engine)
-# For the latest info, see http://www.ogre3d.org/
-#
-# The contents of this file are placed in the public domain. Feel
-# free to make use of it in any way you like.
-#-------------------------------------------------------------------
-
-# - Try to find OGRE
-# If you have multiple versions of Ogre installed, use the CMake or
-# the environment variable OGRE_HOME to point to the path where the
-# desired Ogre version can be found.
-# By default this script will look for a dynamic Ogre build. If you
-# need to link against static Ogre libraries, set the CMake variable
-# OGRE_STATIC to TRUE.
-#
-# Once done, this will define
-#
-#  OGRE_FOUND - system has OGRE
-#  OGRE_INCLUDE_DIRS - the OGRE include directories 
-#  OGRE_LIBRARIES - link these to use the OGRE core
-#  OGRE_BINARY_REL - location of the main Ogre binary (win32 non-static only, release)
-#  OGRE_BINARY_DBG - location of the main Ogre binaries (win32 non-static only, debug)
-#
-# Additionally this script searches for the following optional
-# parts of the Ogre package:
-#  Plugin_BSPSceneManager, Plugin_CgProgramManager,
-#  Plugin_OctreeSceneManager, Plugin_OctreeZone,
-#  Plugin_ParticleFX, Plugin_PCZSceneManager,
-#  RenderSystem_GL, RenderSystem_GL3Plus,
-#  RenderSystem_GLES, RenderSystem_GLES2,
-#  RenderSystem_Direct3D9, RenderSystem_Direct3D11
-#  Paging, Terrain, Volume, Overlay
-#
-# For each of these components, the following variables are defined:
-#
-#  OGRE_${COMPONENT}_FOUND - ${COMPONENT} is available
-#  OGRE_${COMPONENT}_INCLUDE_DIRS - additional include directories for ${COMPONENT}
-#  OGRE_${COMPONENT}_LIBRARIES - link these to use ${COMPONENT} 
-#  OGRE_${COMPONENT}_BINARY_REL - location of the component binary (win32 non-static only, release)
-#  OGRE_${COMPONENT}_BINARY_DBG - location of the component binary (win32 non-static only, debug)
-#
-# Finally, the following variables are defined:
-#
-#  OGRE_PLUGIN_DIR_REL - The directory where the release versions of
-#       the OGRE plugins are located
-#  OGRE_PLUGIN_DIR_DBG - The directory where the debug versions of
-#       the OGRE plugins are located
-#  OGRE_MEDIA_DIR - The directory where the OGRE sample media is
-#       located, if available
-
-include(FindPkgMacros)
-include(PreprocessorUtils)
-findpkg_begin(OGRE)
-
-
-# Get path, convert backslashes as ${ENV_${var}}
-getenv_path(OGRE_HOME)
-getenv_path(OGRE_SDK)
-getenv_path(OGRE_SOURCE)
-getenv_path(OGRE_BUILD)
-getenv_path(OGRE_DEPENDENCIES_DIR)
-getenv_path(PROGRAMFILES)
-
-# Determine whether to search for a dynamic or static build
-if (OGRE_STATIC)
-  set(OGRE_LIB_SUFFIX "Static")
-else ()
-  set(OGRE_LIB_SUFFIX "")
-endif ()
-
-if(APPLE AND NOT OGRE_STATIC)
-	set(OGRE_LIBRARY_NAMES "Ogre${OGRE_LIB_SUFFIX}")
-else()
-    set(OGRE_LIBRARY_NAMES "OgreMain${OGRE_LIB_SUFFIX}")
-endif()
-get_debug_names(OGRE_LIBRARY_NAMES)
-          
-# construct search paths from environmental hints and
-# OS specific guesses
-if (WIN32)
-  set(OGRE_PREFIX_GUESSES
-    ${ENV_PROGRAMFILES}/OGRE
-    C:/OgreSDK
-  )
-elseif (UNIX)
-  set(OGRE_PREFIX_GUESSES
-    /opt/ogre
-    /opt/OGRE
-    /usr/lib${LIB_SUFFIX}/ogre
-    /usr/lib${LIB_SUFFIX}/OGRE
-    /usr/local/lib${LIB_SUFFIX}/ogre
-    /usr/local/lib${LIB_SUFFIX}/OGRE
-    $ENV{HOME}/ogre
-    $ENV{HOME}/OGRE
-  )
-  if (APPLE)
-    set(OGRE_PREFIX_GUESSES 
-      ${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx
-      ${OGRE_PREFIX_GUESSES}
-    )
-  endif ()
-endif ()
-set(OGRE_PREFIX_PATH
-  ${OGRE_HOME} ${OGRE_SDK} ${ENV_OGRE_HOME} ${ENV_OGRE_SDK}
-  ${OGRE_PREFIX_GUESSES}
-)
-create_search_paths(OGRE)
-# If both OGRE_BUILD and OGRE_SOURCE are set, prepare to find Ogre in a build dir
-set(OGRE_PREFIX_SOURCE ${OGRE_SOURCE} ${ENV_OGRE_SOURCE})
-set(OGRE_PREFIX_BUILD ${OGRE_BUILD} ${ENV_OGRE_BUILD})
-set(OGRE_PREFIX_DEPENDENCIES_DIR ${OGRE_DEPENDENCIES_DIR} ${ENV_OGRE_DEPENDENCIES_DIR})
-if (OGRE_PREFIX_SOURCE AND OGRE_PREFIX_BUILD)
-  foreach(dir ${OGRE_PREFIX_SOURCE})
-    set(OGRE_INC_SEARCH_PATH ${dir}/OgreMain/include ${dir}/Dependencies/include ${dir}/iOSDependencies/include ${dir}/AndroidDependencies/include ${OGRE_INC_SEARCH_PATH})
-    set(OGRE_LIB_SEARCH_PATH ${dir}/lib ${dir}/Dependencies/lib ${dir}/iOSDependencies/lib ${dir}/AndroidDependencies/lib/${ANDROID_ABI} ${OGRE_LIB_SEARCH_PATH})
-    set(OGRE_BIN_SEARCH_PATH ${dir}/Samples/Common/bin ${OGRE_BIN_SEARCH_PATH})
-  endforeach(dir)
-  foreach(dir ${OGRE_PREFIX_BUILD})
-    set(OGRE_INC_SEARCH_PATH ${dir}/include ${OGRE_INC_SEARCH_PATH})
-    set(OGRE_LIB_SEARCH_PATH ${dir}/lib ${OGRE_LIB_SEARCH_PATH})
-
-    if (OGRE_BUILD_PLATFORM_APPLE_IOS)
-        set(OGRE_LIB_SEARCH_PATH ${dir}/lib/iphoneos ${dir}/lib/iphonesimulator ${OGRE_LIB_SEARCH_PATH})
-    endif()
-
-    set(OGRE_BIN_SEARCH_PATH ${dir}/bin ${OGRE_BIN_SEARCH_PATH})
-    set(OGRE_BIN_SEARCH_PATH ${dir}/Samples/Common/bin ${OGRE_BIN_SEARCH_PATH})
-
-    if(APPLE AND NOT OGRE_BUILD_PLATFORM_APPLE_IOS)
-      set(OGRE_BIN_SEARCH_PATH ${dir}/bin/macosx ${OGRE_BIN_SEARCH_PATH})
-    endif()
-  endforeach(dir)
-  
-  if (OGRE_PREFIX_DEPENDENCIES_DIR)
-    set(OGRE_INC_SEARCH_PATH ${OGRE_PREFIX_DEPENDENCIES_DIR}/include ${OGRE_INC_SEARCH_PATH})
-    set(OGRE_LIB_SEARCH_PATH ${OGRE_PREFIX_DEPENDENCIES_DIR}/lib ${OGRE_LIB_SEARCH_PATH})
-    set(OGRE_BIN_SEARCH_PATH ${OGRE_PREFIX_DEPENDENCIES_DIR}/bin ${OGRE_BIN_SEARCH_PATH})
-  endif()
-else()
-  set(OGRE_PREFIX_SOURCE "NOTFOUND")
-  set(OGRE_PREFIX_BUILD "NOTFOUND")
-endif ()
-
-# redo search if any of the environmental hints changed
-set(OGRE_COMPONENTS Paging Terrain Volume Overlay 
-  Plugin_BSPSceneManager Plugin_CgProgramManager Plugin_OctreeSceneManager
-  Plugin_OctreeZone Plugin_PCZSceneManager Plugin_ParticleFX
-  RenderSystem_Direct3D11 RenderSystem_Direct3D9 RenderSystem_GL RenderSystem_GL3Plus RenderSystem_GLES RenderSystem_GLES2)
-set(OGRE_RESET_VARS 
-  OGRE_CONFIG_INCLUDE_DIR OGRE_INCLUDE_DIR 
-  OGRE_LIBRARY_FWK OGRE_LIBRARY_REL OGRE_LIBRARY_DBG
-  OGRE_PLUGIN_DIR_DBG OGRE_PLUGIN_DIR_REL OGRE_MEDIA_DIR)
-foreach (comp ${OGRE_COMPONENTS})
-  set(OGRE_RESET_VARS ${OGRE_RESET_VARS}
-    OGRE_${comp}_INCLUDE_DIR OGRE_${comp}_LIBRARY_FWK
-    OGRE_${comp}_LIBRARY_DBG OGRE_${comp}_LIBRARY_REL
-  )
-endforeach (comp)
-set(OGRE_PREFIX_WATCH ${OGRE_PREFIX_PATH} ${OGRE_PREFIX_SOURCE} ${OGRE_PREFIX_BUILD})
-clear_if_changed(OGRE_PREFIX_WATCH ${OGRE_RESET_VARS})
-
-if(NOT OGRE_STATIC)
-	# try to locate Ogre via pkg-config
-	use_pkgconfig(OGRE_PKGC "OGRE${OGRE_LIB_SUFFIX}")
-
-	# try to find framework on OSX
-	findpkg_framework(Ogre)
-else()
-	set(OGRE_LIBRARY_FWK "")
-endif()
-
-# locate Ogre include files
-find_path(OGRE_CONFIG_INCLUDE_DIR NAMES OgreBuildSettings.h HINTS ${OGRE_INC_SEARCH_PATH} ${OGRE_FRAMEWORK_INCLUDES} ${OGRE_PKGC_INCLUDE_DIRS} PATH_SUFFIXES "OGRE")
-find_path(OGRE_INCLUDE_DIR NAMES OgreRoot.h HINTS ${OGRE_CONFIG_INCLUDE_DIR} ${OGRE_INC_SEARCH_PATH} ${OGRE_FRAMEWORK_INCLUDES} ${OGRE_PKGC_INCLUDE_DIRS} PATH_SUFFIXES "OGRE")
-set(OGRE_INCOMPATIBLE FALSE)
-
-if (OGRE_INCLUDE_DIR)
-  if (NOT OGRE_CONFIG_INCLUDE_DIR)
-    set(OGRE_CONFIG_INCLUDE_DIR ${OGRE_INCLUDE_DIR})
-  endif ()
-  # determine Ogre version
-  file(READ ${OGRE_INCLUDE_DIR}/OgrePrerequisites.h OGRE_TEMP_VERSION_CONTENT)
-  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_MAJOR OGRE_VERSION_MAJOR)
-  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_MINOR OGRE_VERSION_MINOR)
-  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_PATCH OGRE_VERSION_PATCH)
-  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_NAME OGRE_VERSION_NAME)
-  set(OGRE_VERSION "${OGRE_VERSION_MAJOR}.${OGRE_VERSION_MINOR}.${OGRE_VERSION_PATCH}")
-  pkg_message(OGRE "Found Ogre ${OGRE_VERSION_NAME} (${OGRE_VERSION})")
-
-  # determine configuration settings
-  set(OGRE_CONFIG_HEADERS
-    ${OGRE_CONFIG_INCLUDE_DIR}/OgreBuildSettings.h
-    ${OGRE_CONFIG_INCLUDE_DIR}/OgreConfig.h
-  )
-  foreach(CFG_FILE ${OGRE_CONFIG_HEADERS})
-    if (EXISTS ${CFG_FILE})
-      set(OGRE_CONFIG_HEADER ${CFG_FILE})
-      break()
-    endif()
-  endforeach()
-  if (OGRE_CONFIG_HEADER)
-    file(READ ${OGRE_CONFIG_HEADER} OGRE_TEMP_CONFIG_CONTENT)
-    has_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_STATIC_LIB OGRE_CONFIG_STATIC)
-    get_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_THREAD_SUPPORT OGRE_CONFIG_THREADS)
-    get_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_THREAD_PROVIDER OGRE_CONFIG_THREAD_PROVIDER)
-    get_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_NO_FREEIMAGE OGRE_CONFIG_FREEIMAGE)
-    if (OGRE_CONFIG_STATIC AND OGRE_STATIC)
-    elseif (OGRE_CONFIG_STATIC OR OGRE_STATIC)
-      pkg_message(OGRE "Build type (static, dynamic) does not match the requested one.")
-      set(OGRE_INCOMPATIBLE TRUE)
-    endif ()
-  else ()
-    pkg_message(OGRE "Could not determine Ogre build configuration.")
-    set(OGRE_INCOMPATIBLE TRUE)
-  endif ()
-else ()
-  set(OGRE_INCOMPATIBLE FALSE)
-endif ()
-
-if (NOT OGRE_SOURCE) # If using ogre sources, use the target names instead of library files to link.
-	find_library(OGRE_LIBRARY_REL NAMES ${OGRE_LIBRARY_NAMES} HINTS ${OGRE_LIB_SEARCH_PATH} ${OGRE_PKGC_LIBRARY_DIRS} ${OGRE_FRAMEWORK_SEARCH_PATH} PATH_SUFFIXES "" "Release" "RelWithDebInfo" "MinSizeRel")
-	find_library(OGRE_LIBRARY_DBG NAMES ${OGRE_LIBRARY_NAMES_DBG} HINTS ${OGRE_LIB_SEARCH_PATH} ${OGRE_PKGC_LIBRARY_DIRS} ${OGRE_FRAMEWORK_SEARCH_PATH} PATH_SUFFIXES "" "Debug")
-else()
-	if( NOT OGRE_LIBRARIES OR OGRE_LIBRARIES STREQUAL "" )
-		message( FATAL_ERROR "When using Ogre from sources, please specify target names in OGRE_LIBRARIES!" )
-	else()
-		message( "Using Ogre source instead of binary libraries - skipping library files search." )
-	endif()
-endif()
-
-make_library_set(OGRE_LIBRARY)
-
-if(APPLE)
-  set(OGRE_LIBRARY_DBG ${OGRE_LIB_SEARCH_PATH})
-endif()
-if (OGRE_INCOMPATIBLE)
-  set(OGRE_LIBRARY "NOTFOUND")
-endif ()
-
-set(OGRE_INCLUDE_DIR ${OGRE_CONFIG_INCLUDE_DIR} ${OGRE_INCLUDE_DIR})
-list(REMOVE_DUPLICATES OGRE_INCLUDE_DIR)
-findpkg_finish(OGRE)
-add_parent_dir(OGRE_INCLUDE_DIRS OGRE_INCLUDE_DIR)
-if (OGRE_SOURCE)
-	# If working from source rather than SDK, add samples include
-	set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} "${OGRE_SOURCE}/Samples/Common/include")
-endif()
-
-mark_as_advanced(OGRE_CONFIG_INCLUDE_DIR OGRE_MEDIA_DIR OGRE_PLUGIN_DIR_REL OGRE_PLUGIN_DIR_DBG)
-
-if (NOT OGRE_FOUND)
-  return()
-endif ()
-
-
-# look for required Ogre dependencies in case of static build and/or threading
-if (OGRE_STATIC)
-  set(OGRE_DEPS_FOUND TRUE)
-  find_package(Cg QUIET)
-  find_package(DirectX QUIET)
-  find_package(FreeImage QUIET)
-  find_package(Freetype QUIET)
-  find_package(OpenGL QUIET)
-  find_package(OpenGLES QUIET)
-  find_package(OpenGLES2 QUIET)
-  find_package(ZLIB QUIET)
-  find_package(ZZip QUIET)
-  if (UNIX AND NOT APPLE AND NOT ANDROID)
-    find_package(X11 QUIET)
-    find_library(XAW_LIBRARY NAMES Xaw Xaw7 PATHS ${DEP_LIB_SEARCH_DIR} ${X11_LIB_SEARCH_PATH})
-    if (NOT XAW_LIBRARY OR NOT X11_Xt_FOUND)
-      set(X11_FOUND FALSE)
-    endif ()
-  endif ()
-
-  set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${ZZip_LIBRARIES} ${ZLIB_LIBRARIES} ${FreeImage_LIBRARIES} ${FREETYPE_LIBRARIES})
-
-  if (APPLE AND NOT OGRE_BUILD_PLATFORM_APPLE_IOS AND NOT ANDROID)
-    set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${X11_LIBRARIES} ${X11_Xt_LIBRARIES} ${XAW_LIBRARY} ${X11_Xrandr_LIB} ${Carbon_LIBRARIES} ${Cocoa_LIBRARIES})
-  endif()
-  
-  if (NOT ZLIB_FOUND OR NOT ZZip_FOUND)
-    set(OGRE_DEPS_FOUND FALSE)
-  endif ()
-  if (NOT FreeImage_FOUND AND NOT OGRE_CONFIG_FREEIMAGE)
-    set(OGRE_DEPS_FOUND FALSE)
-  endif ()
-  if (NOT FREETYPE_FOUND)
-    set(OGRE_DEPS_FOUND FALSE)
-  endif ()
-  if (UNIX AND NOT APPLE AND NOT ANDROID)
-	if (NOT X11_FOUND)
-      set(OGRE_DEPS_FOUND FALSE)
-	endif ()
-  endif ()
-endif()
-  if (OGRE_CONFIG_THREADS)
-    if (OGRE_CONFIG_THREAD_PROVIDER EQUAL 1)
-      if (OGRE_STATIC)
-    	set(Boost_USE_STATIC_LIBS TRUE)
-    	if(OGRE_BUILD_PLATFORM_APPLE_IOS)
-          set(Boost_USE_MULTITHREADED OFF)
-        endif()
-      endif()
-      
-      set(OGRE_BOOST_COMPONENTS thread date_time)
-      find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)
-      if(Boost_FOUND AND Boost_VERSION GREATER 104900)
-        if(Boost_VERSION GREATER 105300)
-            set(OGRE_BOOST_COMPONENTS thread date_time system atomic chrono)
-        else()
-            set(OGRE_BOOST_COMPONENTS thread date_time system chrono)
-        endif()
-      endif()
-
-      find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)
-      if (NOT Boost_THREAD_FOUND)
-        set(OGRE_DEPS_FOUND FALSE)
-      else ()
-        set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${Boost_LIBRARIES})
-        set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})
-      endif ()
-    elseif (OGRE_CONFIG_THREAD_PROVIDER EQUAL 2)
-      find_package(POCO QUIET)
-      if (NOT POCO_FOUND)
-        set(OGRE_DEPS_FOUND FALSE)
-      else ()
-        set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${POCO_LIBRARIES})
-        set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} ${POCO_INCLUDE_DIRS})
-      endif ()
-    elseif (OGRE_CONFIG_THREAD_PROVIDER EQUAL 3)
-      find_package(TBB QUIET)
-      if (NOT TBB_FOUND)
-        set(OGRE_DEPS_FOUND FALSE)
-      else ()
-        set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${TBB_LIBRARIES})
-        set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} ${TBB_INCLUDE_DIRS})
-      endif ()
-    endif ()
-  endif ()
-if (OGRE_STATIC)
-  if (NOT OGRE_DEPS_FOUND)
-    pkg_message(OGRE "Could not find all required dependencies for the Ogre package.")
-    set(OGRE_FOUND FALSE)
-  endif ()
-endif ()
-
-if (NOT OGRE_FOUND)
-  return()
-endif ()
-
-
-get_filename_component(OGRE_LIBRARY_DIR_REL "${OGRE_LIBRARY_REL}" PATH)
-get_filename_component(OGRE_LIBRARY_DIR_DBG "${OGRE_LIBRARY_DBG}" PATH)
-set(OGRE_LIBRARY_DIRS ${OGRE_LIBRARY_DIR_REL} ${OGRE_LIBRARY_DIR_DBG})
-
-# find binaries
-if (NOT OGRE_STATIC)
-	if (WIN32)
-		find_file(OGRE_BINARY_REL NAMES "OgreMain.dll" HINTS ${OGRE_BIN_SEARCH_PATH}
-          PATH_SUFFIXES "" Release RelWithDebInfo MinSizeRel)
-		find_file(OGRE_BINARY_DBG NAMES "OgreMain_d.dll" HINTS ${OGRE_BIN_SEARCH_PATH}
-          PATH_SUFFIXES "" Debug )
-	endif()
-	mark_as_advanced(OGRE_BINARY_REL OGRE_BINARY_DBG)
-endif()
-
-
-#########################################################
-# Find Ogre components
-#########################################################
-
-set(OGRE_COMPONENT_SEARCH_PATH_REL 
-  ${OGRE_LIBRARY_DIR_REL}/..
-  ${OGRE_LIBRARY_DIR_REL}/../..
-  ${OGRE_BIN_SEARCH_PATH}
-)
-set(OGRE_COMPONENT_SEARCH_PATH_DBG
-  ${OGRE_LIBRARY_DIR_DBG}/..
-  ${OGRE_LIBRARY_DIR_DBG}/../..
-  ${OGRE_BIN_SEARCH_PATH}
-)
-
-macro(ogre_find_component COMPONENT HEADER)
-  findpkg_begin(OGRE_${COMPONENT})
-  find_path(OGRE_${COMPONENT}_INCLUDE_DIR NAMES ${HEADER} HINTS ${OGRE_INCLUDE_DIRS} ${OGRE_PREFIX_SOURCE} PATH_SUFFIXES ${COMPONENT} OGRE/${COMPONENT} Components/${COMPONENT}/include)
-  set(OGRE_${COMPONENT}_LIBRARY_NAMES "Ogre${COMPONENT}${OGRE_LIB_SUFFIX}")
-  get_debug_names(OGRE_${COMPONENT}_LIBRARY_NAMES)
-  find_library(OGRE_${COMPONENT}_LIBRARY_REL NAMES ${OGRE_${COMPONENT}_LIBRARY_NAMES} HINTS ${OGRE_LIBRARY_DIR_REL} PATH_SUFFIXES "" "Release" "RelWithDebInfo" "MinSizeRel")
-  find_library(OGRE_${COMPONENT}_LIBRARY_DBG NAMES ${OGRE_${COMPONENT}_LIBRARY_NAMES_DBG} HINTS ${OGRE_LIBRARY_DIR_DBG} PATH_SUFFIXES "" "Debug")
-  make_library_set(OGRE_${COMPONENT}_LIBRARY)
-  findpkg_finish(OGRE_${COMPONENT})
-  if (OGRE_${COMPONENT}_FOUND)
-    # find binaries
-    if (NOT OGRE_STATIC)
-	  if (WIN32)
-	    find_file(OGRE_${COMPONENT}_BINARY_REL NAMES "Ogre${COMPONENT}.dll" HINTS ${OGRE_COMPONENT_SEARCH_PATH_REL} PATH_SUFFIXES "" bin bin/Release bin/RelWithDebInfo bin/MinSizeRel Release)
-	    find_file(OGRE_${COMPONENT}_BINARY_DBG NAMES "Ogre${COMPONENT}_d.dll" HINTS ${OGRE_COMPONENT_SEARCH_PATH_DBG} PATH_SUFFIXES "" bin bin/Debug Debug)
-	  endif()
-	  mark_as_advanced(OGRE_${COMPONENT}_BINARY_REL OGRE_${COMPONENT}_BINARY_DBG)
-    endif()
-  endif()
-endmacro()
-
-# look for Paging component
-ogre_find_component(Paging OgrePaging.h)
-# look for Terrain component
-ogre_find_component(Terrain OgreTerrain.h)
-# look for Property component
-ogre_find_component(Property OgreProperty.h)
-# look for RTShaderSystem component
-ogre_find_component(RTShaderSystem OgreRTShaderSystem.h)
-# look for Volume component
-ogre_find_component(Volume OgreVolumePrerequisites.h)
-# look for Overlay component
-ogre_find_component(Overlay OgreOverlaySystem.h)
-
-#########################################################
-# Find Ogre plugins
-#########################################################        
-macro(ogre_find_plugin PLUGIN HEADER)
-  # On Unix, the plugins might have no prefix
-  if (CMAKE_FIND_LIBRARY_PREFIXES)
-    set(TMP_CMAKE_LIB_PREFIX ${CMAKE_FIND_LIBRARY_PREFIXES})
-    set(CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES} "")
-  endif()
-  
-  # strip RenderSystem_ or Plugin_ prefix from plugin name
-  string(REPLACE "RenderSystem_" "" PLUGIN_TEMP ${PLUGIN})
-  string(REPLACE "Plugin_" "" PLUGIN_NAME ${PLUGIN_TEMP})
-  
-  # header files for plugins are not usually needed, but find them anyway if they are present
-  set(OGRE_PLUGIN_PATH_SUFFIXES
-    PlugIns PlugIns/${PLUGIN_NAME} Plugins Plugins/${PLUGIN_NAME} ${PLUGIN} 
-    RenderSystems RenderSystems/${PLUGIN_NAME} ${ARGN})
-  find_path(OGRE_${PLUGIN}_INCLUDE_DIR NAMES ${HEADER} 
-    HINTS ${OGRE_INCLUDE_DIRS} ${OGRE_PREFIX_SOURCE}  
-    PATH_SUFFIXES ${OGRE_PLUGIN_PATH_SUFFIXES})
-  # find link libraries for plugins
-  set(OGRE_${PLUGIN}_LIBRARY_NAMES "${PLUGIN}${OGRE_LIB_SUFFIX}")
-  get_debug_names(OGRE_${PLUGIN}_LIBRARY_NAMES)
-  set(OGRE_${PLUGIN}_LIBRARY_FWK ${OGRE_LIBRARY_FWK})
-  find_library(OGRE_${PLUGIN}_LIBRARY_REL NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES}
-    HINTS "${OGRE_BUILD}/lib" ${OGRE_LIBRARY_DIRS} PATH_SUFFIXES "" OGRE opt Release Release/opt RelWithDebInfo RelWithDebInfo/opt MinSizeRel MinSizeRel/opt)
-  find_library(OGRE_${PLUGIN}_LIBRARY_DBG NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES_DBG}
-    HINTS "${OGRE_BUILD}/lib" ${OGRE_LIBRARY_DIRS} PATH_SUFFIXES "" OGRE opt Debug Debug/opt)
-  make_library_set(OGRE_${PLUGIN}_LIBRARY)
-
-  if (OGRE_${PLUGIN}_LIBRARY OR OGRE_${PLUGIN}_INCLUDE_DIR)
-    set(OGRE_${PLUGIN}_FOUND TRUE)
-    if (OGRE_${PLUGIN}_INCLUDE_DIR)
-      set(OGRE_${PLUGIN}_INCLUDE_DIRS ${OGRE_${PLUGIN}_INCLUDE_DIR})
-    endif()
-    set(OGRE_${PLUGIN}_LIBRARIES ${OGRE_${PLUGIN}_LIBRARY})
-  endif ()
-
-  mark_as_advanced(OGRE_${PLUGIN}_INCLUDE_DIR OGRE_${PLUGIN}_LIBRARY_REL OGRE_${PLUGIN}_LIBRARY_DBG OGRE_${PLUGIN}_LIBRARY_FWK)
-
-  # look for plugin dirs
-  if (OGRE_${PLUGIN}_FOUND)
-    if (NOT OGRE_PLUGIN_DIR_REL OR NOT OGRE_PLUGIN_DIR_DBG)
-      if (WIN32)
-        set(OGRE_PLUGIN_SEARCH_PATH_REL 
-          ${OGRE_LIBRARY_DIR_REL}/..
-          ${OGRE_LIBRARY_DIR_REL}/../..
-		  ${OGRE_BIN_SEARCH_PATH}
-        )
-        set(OGRE_PLUGIN_SEARCH_PATH_DBG
-          ${OGRE_LIBRARY_DIR_DBG}/..
-          ${OGRE_LIBRARY_DIR_DBG}/../..
-		  ${OGRE_BIN_SEARCH_PATH}
-        )
-        find_path(OGRE_PLUGIN_DIR_REL NAMES "${PLUGIN}.dll" HINTS ${OGRE_PLUGIN_SEARCH_PATH_REL}
-          PATH_SUFFIXES "" bin bin/Release bin/RelWithDebInfo bin/MinSizeRel Release)
-        find_path(OGRE_PLUGIN_DIR_DBG NAMES "${PLUGIN}_d.dll" HINTS ${OGRE_PLUGIN_SEARCH_PATH_DBG}
-          PATH_SUFFIXES "" bin bin/Debug Debug)
-      elseif (UNIX)
-        get_filename_component(OGRE_PLUGIN_DIR_TMP ${OGRE_${PLUGIN}_LIBRARY_REL} PATH)
-        set(OGRE_PLUGIN_DIR_REL ${OGRE_PLUGIN_DIR_TMP} CACHE STRING "Ogre plugin dir (release)" FORCE)
-	    get_filename_component(OGRE_PLUGIN_DIR_TMP ${OGRE_${PLUGIN}_LIBRARY_DBG} PATH)
-        set(OGRE_PLUGIN_DIR_DBG ${OGRE_PLUGIN_DIR_TMP} CACHE STRING "Ogre plugin dir (debug)" FORCE)  
-      endif ()
-    endif ()
-	
-	# find binaries
-	if (NOT OGRE_STATIC)
-		if (WIN32)
-			find_file(OGRE_${PLUGIN}_REL NAMES "${PLUGIN}.dll" HINTS ${OGRE_PLUGIN_DIR_REL})
-			find_file(OGRE_${PLUGIN}_DBG NAMES "${PLUGIN}_d.dll" HINTS ${OGRE_PLUGIN_DIR_DBG})
-		endif()
-		mark_as_advanced(OGRE_${PLUGIN}_REL OGRE_${PLUGIN}_DBG)
-	endif()
-	
-  endif ()
-
-  if (TMP_CMAKE_LIB_PREFIX)
-    set(CMAKE_FIND_LIBRARY_PREFIXES ${TMP_CMAKE_LIB_PREFIX})
-  endif ()
-endmacro(ogre_find_plugin)
-
-ogre_find_plugin(Plugin_PCZSceneManager OgrePCZSceneManager.h PCZ PlugIns/PCZSceneManager/include)
-ogre_find_plugin(Plugin_OctreeZone OgreOctreeZone.h PCZ PlugIns/OctreeZone/include)
-ogre_find_plugin(Plugin_BSPSceneManager OgreBspSceneManager.h PlugIns/BSPSceneManager/include)
-ogre_find_plugin(Plugin_CgProgramManager OgreCgProgram.h PlugIns/CgProgramManager/include)
-ogre_find_plugin(Plugin_OctreeSceneManager OgreOctreeSceneManager.h PlugIns/OctreeSceneManager/include)
-ogre_find_plugin(Plugin_ParticleFX OgreParticleFXPrerequisites.h PlugIns/ParticleFX/include)
-ogre_find_plugin(RenderSystem_GL OgreGLRenderSystem.h RenderSystems/GL/include)
-ogre_find_plugin(RenderSystem_GL3Plus OgreGL3PlusRenderSystem.h RenderSystems/GL3Plus/include)
-ogre_find_plugin(RenderSystem_GLES OgreGLESRenderSystem.h RenderSystems/GLES/include)
-ogre_find_plugin(RenderSystem_GLES2 OgreGLES2RenderSystem.h RenderSystems/GLES2/include)
-ogre_find_plugin(RenderSystem_Direct3D9 OgreD3D9RenderSystem.h RenderSystems/Direct3D9/include)
-ogre_find_plugin(RenderSystem_Direct3D11 OgreD3D11RenderSystem.h RenderSystems/Direct3D11/include)
-        
-if (OGRE_STATIC)
-  # check if dependencies for plugins are met
-  if (NOT DirectX_FOUND)
-    set(OGRE_RenderSystem_Direct3D9_FOUND FALSE)
-  endif ()
-  if (NOT DirectX_D3D11_FOUND)
-    set(OGRE_RenderSystem_Direct3D11_FOUND FALSE)
-  endif ()
-  if (NOT OPENGL_FOUND)
-    set(OGRE_RenderSystem_GL_FOUND FALSE)
-  endif ()
-  if (NOT OPENGL_FOUND)
-    set(OGRE_RenderSystem_GL3Plus_FOUND FALSE)
-  endif ()
-  if (NOT OPENGLES_FOUND)
-    set(OGRE_RenderSystem_GLES_FOUND FALSE)
-  endif ()
-  if (NOT OPENGLES2_FOUND)
-    set(OGRE_RenderSystem_GLES2_FOUND FALSE)
-  endif ()
-  if (NOT Cg_FOUND)
-    set(OGRE_Plugin_CgProgramManager_FOUND FALSE)
-  endif ()
-  
-  set(OGRE_RenderSystem_Direct3D9_LIBRARIES ${OGRE_RenderSystem_Direct3D9_LIBRARIES}
-    ${DirectX_LIBRARIES}
-  )
-
-  set(OGRE_RenderSystem_Direct3D11_LIBRARIES ${OGRE_RenderSystem_Direct3D11_LIBRARIES}
-    ${DirectX_D3D11_LIBRARIES}
-  )
-  set(OGRE_RenderSystem_GL_LIBRARIES ${OGRE_RenderSystem_GL_LIBRARIES}
-    ${OPENGL_LIBRARIES}
-  )
-  set(OGRE_RenderSystem_GL3Plus_LIBRARIES ${OGRE_RenderSystem_GL3Plus_LIBRARIES}
-    ${OPENGL_LIBRARIES}
-  )
-  set(OGRE_RenderSystem_GLES_LIBRARIES ${OGRE_RenderSystem_GLES_LIBRARIES}
-    ${OPENGLES_LIBRARIES}
-  )
-  set(OGRE_RenderSystem_GLES2_LIBRARIES ${OGRE_RenderSystem_GLES2_LIBRARIES}
-    ${OPENGLES2_LIBRARIES}
-  )
-  set(OGRE_Plugin_CgProgramManager_LIBRARIES ${OGRE_Plugin_CgProgramManager_LIBRARIES}
-    ${Cg_LIBRARIES}
-  )
-endif ()
-
-# look for the media directory
-set(OGRE_MEDIA_SEARCH_PATH
-  ${OGRE_SOURCE}
-  ${OGRE_LIBRARY_DIR_REL}/..
-  ${OGRE_LIBRARY_DIR_DBG}/..
-  ${OGRE_LIBRARY_DIR_REL}/../..
-  ${OGRE_LIBRARY_DIR_DBG}/../..
-  ${OGRE_PREFIX_SOURCE}
-)
-set(OGRE_MEDIA_SEARCH_SUFFIX
-  Samples/Media
-  Media
-  media
-  share/OGRE/media
-  share/OGRE/Media
-)
-
-clear_if_changed(OGRE_PREFIX_WATCH OGRE_MEDIA_DIR)
-find_path(OGRE_MEDIA_DIR NAMES packs/cubemapsJS.zip HINTS ${OGRE_MEDIA_SEARCH_PATH}
-  PATHS ${OGRE_PREFIX_PATH} PATH_SUFFIXES ${OGRE_MEDIA_SEARCH_SUFFIX})
-
Index: git/CMake/Templates/OGRE-Overlay.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE-Overlay.pc.in
+++ git/CMake/Templates/OGRE-Overlay.pc.in
@@ -6,6 +6,6 @@ includedir=${prefix}/include
 Name: OGRE-Overlay
 Description: Overlay component for OGRE
 Version: @OGRE_VERSION@
-Requires: OGRE = @OGRE_VERSION@
-Libs: -L${libdir} -lOgreOverlay@OGRE_LIB_SUFFIX@
-Cflags: -I${includedir}/OGRE/Overlay @OGRE_CFLAGS@
\ No newline at end of file
+Requires: OGRE19 = @OGRE_VERSION@
+Libs: -L${libdir} -lOgre19Overlay@OGRE_LIB_SUFFIX@
+Cflags: -I${includedir}/OGRE19/Overlay @OGRE_CFLAGS@
Index: git/CMake/Templates/OGRE-Paging.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE-Paging.pc.in
+++ git/CMake/Templates/OGRE-Paging.pc.in
@@ -6,6 +6,6 @@ includedir=${prefix}/include
 Name: OGRE-Paging
 Description: General purpose paging component for OGRE
 Version: @OGRE_VERSION@
-Requires: OGRE = @OGRE_VERSION@
-Libs: -L${libdir} -lOgrePaging@OGRE_LIB_SUFFIX@
-Cflags: -I${includedir}/OGRE/Paging @OGRE_CFLAGS@
+Requires: OGRE19 = @OGRE_VERSION@
+Libs: -L${libdir} -lOgre19Paging@OGRE_LIB_SUFFIX@
+Cflags: -I${includedir}/OGRE19/Paging @OGRE_CFLAGS@
Index: git/CMake/Templates/OGRE.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE.pc.in
+++ git/CMake/Templates/OGRE.pc.in
@@ -2,11 +2,11 @@ prefix=@OGRE_PREFIX_PATH@
 exec_prefix=${prefix}
 libdir=${prefix}/@OGRE_LIB_DIRECTORY@
 includedir=${prefix}/include
-plugindir=${libdir}/OGRE
+plugindir=${libdir}/OGRE19
 
 Name: OGRE
 Description: Object-Oriented Graphics Rendering Engine
 Version: @OGRE_VERSION@
 URL: http://www.ogre3d.org
-Libs: -L${libdir} -lOgreMain@OGRE_LIB_SUFFIX@ @OGRE_ADDITIONAL_LIBS@
-Cflags: -I${includedir} -I${includedir}/OGRE @OGRE_CFLAGS@
+Libs: -L${libdir} -lOgre19Main@OGRE_LIB_SUFFIX@ @OGRE_ADDITIONAL_LIBS@
+Cflags: -I${includedir} -I${includedir}/OGRE19 @OGRE_CFLAGS@
Index: git/CMake/Templates/OGRE-PCZ.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE-PCZ.pc.in
+++ git/CMake/Templates/OGRE-PCZ.pc.in
@@ -6,6 +6,6 @@ includedir=${prefix}/include
 Name: OGRE-PCZ
 Description: Portal-Connected Zone Scene Manager for OGRE
 Version: @OGRE_VERSION@
-Requires: OGRE = @OGRE_VERSION@
-Libs: ${libdir}/OGRE/@OGRE_PLUGIN_PREFIX@Plugin_PCZSceneManager@OGRE_LIB_SUFFIX@@OGRE_PLUGIN_EXT@ ${libdir}/OGRE/@OGRE_PLUGIN_PREFIX@Plugin_OctreeZone@OGRE_LIB_SUFFIX@@OGRE_PLUGIN_EXT@ -Wl,-rpath,${libdir}/OGRE
-Cflags: -I${includedir}/OGRE/Plugins/PCZSceneManager -I${includedir}/OGRE/Plugins/OctreeZone @OGRE_CFLAGS@
+Requires: OGRE19 = @OGRE_VERSION@
+Libs: ${libdir}/OGRE19/@OGRE_PLUGIN_PREFIX@Plugin_PCZSceneManager@OGRE_LIB_SUFFIX@@OGRE_PLUGIN_EXT@ ${libdir}/OGRE19/@OGRE_PLUGIN_PREFIX@Plugin_OctreeZone@OGRE_LIB_SUFFIX@@OGRE_PLUGIN_EXT@ -Wl,-rpath,${libdir}/OGRE19
+Cflags: -I${includedir}/OGRE19/Plugins/PCZSceneManager -I${includedir}/OGRE19/Plugins/OctreeZone @OGRE_CFLAGS@
Index: git/CMake/Templates/OGRE-Property.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE-Property.pc.in
+++ git/CMake/Templates/OGRE-Property.pc.in
@@ -6,6 +6,6 @@ includedir=${prefix}/include
 Name: OGRE-Property
 Description: General purpose property component for OGRE
 Version: @OGRE_VERSION@
-Requires: OGRE = @OGRE_VERSION@
-Libs: -L${libdir} -lOgreProperty@OGRE_LIB_SUFFIX@
-Cflags: -I${includedir}/OGRE/Property @OGRE_CFLAGS@
+Requires: OGRE19 = @OGRE_VERSION@
+Libs: -L${libdir} -lOgre19Property@OGRE_LIB_SUFFIX@
+Cflags: -I${includedir}/OGRE19/Property @OGRE_CFLAGS@
Index: git/CMake/Templates/OGRE-RTShaderSystem.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE-RTShaderSystem.pc.in
+++ git/CMake/Templates/OGRE-RTShaderSystem.pc.in
@@ -6,6 +6,6 @@ includedir=${prefix}/include
 Name: OGRE-RTShaderSystem
 Description: Real time shader generation component for OGRE
 Version: @OGRE_VERSION@
-Requires: OGRE = @OGRE_VERSION@
-Libs: -L${libdir} -lOgreRTShaderSystem@OGRE_LIB_SUFFIX@
-Cflags: -I${includedir}/OGRE/RTShaderSystem @OGRE_CFLAGS@
+Requires: OGRE19 = @OGRE_VERSION@
+Libs: -L${libdir} -lOgre19RTShaderSystem@OGRE_LIB_SUFFIX@
+Cflags: -I${includedir}/OGRE19/RTShaderSystem @OGRE_CFLAGS@
Index: git/CMake/Templates/OGREStatic.pc.in
===================================================================
--- git.orig/CMake/Templates/OGREStatic.pc.in
+++ git/CMake/Templates/OGREStatic.pc.in
@@ -2,12 +2,12 @@ prefix=@OGRE_PREFIX_PATH@
 exec_prefix=${prefix}
 libdir=${prefix}/@OGRE_LIB_DIRECTORY@
 includedir=${prefix}/include
-plugindir=${libdir}/OGRE
+plugindir=${libdir}/OGRE19
 
 Name: OGRE (static lib)
 Description: Object-Oriented Graphics Rendering Engine
 Version: @OGRE_VERSION@
 URL: http://www.ogre3d.org
 Requires: freetype2, zziplib, x11, xt, xaw7, gl
-Libs: -L${libdir} -L${plugindir} -lOgreMain@OGRE_LIB_SUFFIX@ @OGRE_ADDITIONAL_LIBS@
-Cflags: -I${includedir} -I${includedir}/OGRE @OGRE_CFLAGS@
+Libs: -L${libdir} -L${plugindir} -lOgre19Main@OGRE_LIB_SUFFIX@ @OGRE_ADDITIONAL_LIBS@
+Cflags: -I${includedir} -I${includedir}/OGRE19 @OGRE_CFLAGS@
Index: git/CMake/Templates/OGRE-Terrain.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE-Terrain.pc.in
+++ git/CMake/Templates/OGRE-Terrain.pc.in
@@ -6,6 +6,6 @@ includedir=${prefix}/include
 Name: OGRE-Terrain
 Description: Outdoor terrain component for OGRE
 Version: @OGRE_VERSION@
-Requires: OGRE = @OGRE_VERSION@ @OGRE_PAGING_ADDITIONAL_PACKAGES@
-Libs: -L${libdir} -lOgreTerrain@OGRE_LIB_SUFFIX@
-Cflags: -I${includedir}/OGRE/Terrain @OGRE_CFLAGS@
+Requires: OGRE19 = @OGRE_VERSION@ @OGRE_PAGING_ADDITIONAL_PACKAGES@
+Libs: -L${libdir} -lOgre19Terrain@OGRE_LIB_SUFFIX@
+Cflags: -I${includedir}/OGRE19/Terrain @OGRE_CFLAGS@
Index: git/CMake/Templates/OGRE-Volume.pc.in
===================================================================
--- git.orig/CMake/Templates/OGRE-Volume.pc.in
+++ git/CMake/Templates/OGRE-Volume.pc.in
@@ -6,6 +6,6 @@ includedir=${prefix}/include
 Name: OGRE-Volume
 Description: Voxel based terrain component for OGRE
 Version: @OGRE_VERSION@
-Requires: OGRE = @OGRE_VERSION@
-Libs: -L${libdir} -lOgreVolume@OGRE_LIB_SUFFIX@
-Cflags: -I${includedir}/OGRE/Volume @OGRE_CFLAGS@
+Requires: OGRE19 = @OGRE_VERSION@
+Libs: -L${libdir} -lOgre19Volume@OGRE_LIB_SUFFIX@
+Cflags: -I${includedir}/OGRE19/Volume @OGRE_CFLAGS@
Index: git/CMake/Packages/FindOGRE19.cmake
===================================================================
--- /dev/null
+++ git/CMake/Packages/FindOGRE19.cmake
@@ -0,0 +1,584 @@
+#-------------------------------------------------------------------
+# This file is part of the CMake build system for OGRE
+#     (Object-oriented Graphics Rendering Engine)
+# For the latest info, see http://www.ogre3d.org/
+#
+# The contents of this file are placed in the public domain. Feel
+# free to make use of it in any way you like.
+#-------------------------------------------------------------------
+
+# - Try to find OGRE
+# If you have multiple versions of Ogre installed, use the CMake or
+# the environment variable OGRE_HOME to point to the path where the
+# desired Ogre version can be found.
+# By default this script will look for a dynamic Ogre build. If you
+# need to link against static Ogre libraries, set the CMake variable
+# OGRE_STATIC to TRUE.
+#
+# Once done, this will define
+#
+#  OGRE_FOUND - system has OGRE
+#  OGRE_INCLUDE_DIRS - the OGRE include directories 
+#  OGRE_LIBRARIES - link these to use the OGRE core
+#  OGRE_BINARY_REL - location of the main Ogre binary (win32 non-static only, release)
+#  OGRE_BINARY_DBG - location of the main Ogre binaries (win32 non-static only, debug)
+#
+# Additionally this script searches for the following optional
+# parts of the Ogre package:
+#  Plugin_BSPSceneManager, Plugin_CgProgramManager,
+#  Plugin_OctreeSceneManager, Plugin_OctreeZone,
+#  Plugin_ParticleFX, Plugin_PCZSceneManager,
+#  RenderSystem_GL, RenderSystem_GL3Plus,
+#  RenderSystem_GLES, RenderSystem_GLES2,
+#  RenderSystem_Direct3D9, RenderSystem_Direct3D11
+#  Paging, Terrain, Volume, Overlay
+#
+# For each of these components, the following variables are defined:
+#
+#  OGRE_${COMPONENT}_FOUND - ${COMPONENT} is available
+#  OGRE_${COMPONENT}_INCLUDE_DIRS - additional include directories for ${COMPONENT}
+#  OGRE_${COMPONENT}_LIBRARIES - link these to use ${COMPONENT} 
+#  OGRE_${COMPONENT}_BINARY_REL - location of the component binary (win32 non-static only, release)
+#  OGRE_${COMPONENT}_BINARY_DBG - location of the component binary (win32 non-static only, debug)
+#
+# Finally, the following variables are defined:
+#
+#  OGRE_PLUGIN_DIR_REL - The directory where the release versions of
+#       the OGRE plugins are located
+#  OGRE_PLUGIN_DIR_DBG - The directory where the debug versions of
+#       the OGRE plugins are located
+#  OGRE_MEDIA_DIR - The directory where the OGRE sample media is
+#       located, if available
+
+include(FindPkgMacros)
+include(PreprocessorUtils)
+findpkg_begin(OGRE)
+
+
+# Get path, convert backslashes as ${ENV_${var}}
+getenv_path(OGRE_HOME)
+getenv_path(OGRE_SDK)
+getenv_path(OGRE_SOURCE)
+getenv_path(OGRE_BUILD)
+getenv_path(OGRE_DEPENDENCIES_DIR)
+getenv_path(PROGRAMFILES)
+
+# Determine whether to search for a dynamic or static build
+if (OGRE_STATIC)
+  set(OGRE_LIB_SUFFIX "Static")
+else ()
+  set(OGRE_LIB_SUFFIX "")
+endif ()
+
+if(APPLE AND NOT OGRE_STATIC)
+	set(OGRE_LIBRARY_NAMES "Ogre19${OGRE_LIB_SUFFIX}")
+else()
+    set(OGRE_LIBRARY_NAMES "OgreMain19${OGRE_LIB_SUFFIX}")
+endif()
+get_debug_names(OGRE_LIBRARY_NAMES)
+          
+# construct search paths from environmental hints and
+# OS specific guesses
+if (WIN32)
+  set(OGRE_PREFIX_GUESSES
+    ${ENV_PROGRAMFILES}/OGRE19
+    C:/OgreSDK
+  )
+elseif (UNIX)
+  set(OGRE_PREFIX_GUESSES
+    /opt/ogre19
+    /opt/OGRE19
+    /usr/lib${LIB_SUFFIX}/ogre19
+    /usr/lib${LIB_SUFFIX}/OGRE19
+    /usr/local/lib${LIB_SUFFIX}/ogre19
+    /usr/local/lib${LIB_SUFFIX}/OGRE19
+    $ENV{HOME}/ogre19
+    $ENV{HOME}/OGRE19
+  )
+  if (APPLE)
+    set(OGRE_PREFIX_GUESSES 
+      ${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx
+      ${OGRE_PREFIX_GUESSES}
+    )
+  endif ()
+endif ()
+set(OGRE_PREFIX_PATH
+  ${OGRE_HOME} ${OGRE_SDK} ${ENV_OGRE_HOME} ${ENV_OGRE_SDK}
+  ${OGRE_PREFIX_GUESSES}
+)
+create_search_paths(OGRE)
+# If both OGRE_BUILD and OGRE_SOURCE are set, prepare to find Ogre in a build dir
+set(OGRE_PREFIX_SOURCE ${OGRE_SOURCE} ${ENV_OGRE_SOURCE})
+set(OGRE_PREFIX_BUILD ${OGRE_BUILD} ${ENV_OGRE_BUILD})
+set(OGRE_PREFIX_DEPENDENCIES_DIR ${OGRE_DEPENDENCIES_DIR} ${ENV_OGRE_DEPENDENCIES_DIR})
+if (OGRE_PREFIX_SOURCE AND OGRE_PREFIX_BUILD)
+  foreach(dir ${OGRE_PREFIX_SOURCE})
+    set(OGRE_INC_SEARCH_PATH ${dir}/OgreMain/include ${dir}/Dependencies/include ${dir}/iOSDependencies/include ${dir}/AndroidDependencies/include ${OGRE_INC_SEARCH_PATH})
+    set(OGRE_LIB_SEARCH_PATH ${dir}/lib ${dir}/Dependencies/lib ${dir}/iOSDependencies/lib ${dir}/AndroidDependencies/lib/${ANDROID_ABI} ${OGRE_LIB_SEARCH_PATH})
+    set(OGRE_BIN_SEARCH_PATH ${dir}/Samples/Common/bin ${OGRE_BIN_SEARCH_PATH})
+  endforeach(dir)
+  foreach(dir ${OGRE_PREFIX_BUILD})
+    set(OGRE_INC_SEARCH_PATH ${dir}/include ${OGRE_INC_SEARCH_PATH})
+    set(OGRE_LIB_SEARCH_PATH ${dir}/lib ${OGRE_LIB_SEARCH_PATH})
+
+    if (OGRE_BUILD_PLATFORM_APPLE_IOS)
+        set(OGRE_LIB_SEARCH_PATH ${dir}/lib/iphoneos ${dir}/lib/iphonesimulator ${OGRE_LIB_SEARCH_PATH})
+    endif()
+
+    set(OGRE_BIN_SEARCH_PATH ${dir}/bin ${OGRE_BIN_SEARCH_PATH})
+    set(OGRE_BIN_SEARCH_PATH ${dir}/Samples/Common/bin ${OGRE_BIN_SEARCH_PATH})
+
+    if(APPLE AND NOT OGRE_BUILD_PLATFORM_APPLE_IOS)
+      set(OGRE_BIN_SEARCH_PATH ${dir}/bin/macosx ${OGRE_BIN_SEARCH_PATH})
+    endif()
+  endforeach(dir)
+  
+  if (OGRE_PREFIX_DEPENDENCIES_DIR)
+    set(OGRE_INC_SEARCH_PATH ${OGRE_PREFIX_DEPENDENCIES_DIR}/include ${OGRE_INC_SEARCH_PATH})
+    set(OGRE_LIB_SEARCH_PATH ${OGRE_PREFIX_DEPENDENCIES_DIR}/lib ${OGRE_LIB_SEARCH_PATH})
+    set(OGRE_BIN_SEARCH_PATH ${OGRE_PREFIX_DEPENDENCIES_DIR}/bin ${OGRE_BIN_SEARCH_PATH})
+  endif()
+else()
+  set(OGRE_PREFIX_SOURCE "NOTFOUND")
+  set(OGRE_PREFIX_BUILD "NOTFOUND")
+endif ()
+
+# redo search if any of the environmental hints changed
+set(OGRE_COMPONENTS Paging Terrain Volume Overlay 
+  Plugin_BSPSceneManager Plugin_CgProgramManager Plugin_OctreeSceneManager
+  Plugin_OctreeZone Plugin_PCZSceneManager Plugin_ParticleFX
+  RenderSystem_Direct3D11 RenderSystem_Direct3D9 RenderSystem_GL RenderSystem_GL3Plus RenderSystem_GLES RenderSystem_GLES2)
+set(OGRE_RESET_VARS 
+  OGRE_CONFIG_INCLUDE_DIR OGRE_INCLUDE_DIR 
+  OGRE_LIBRARY_FWK OGRE_LIBRARY_REL OGRE_LIBRARY_DBG
+  OGRE_PLUGIN_DIR_DBG OGRE_PLUGIN_DIR_REL OGRE_MEDIA_DIR)
+foreach (comp ${OGRE_COMPONENTS})
+  set(OGRE_RESET_VARS ${OGRE_RESET_VARS}
+    OGRE_${comp}_INCLUDE_DIR OGRE_${comp}_LIBRARY_FWK
+    OGRE_${comp}_LIBRARY_DBG OGRE_${comp}_LIBRARY_REL
+  )
+endforeach (comp)
+set(OGRE_PREFIX_WATCH ${OGRE_PREFIX_PATH} ${OGRE_PREFIX_SOURCE} ${OGRE_PREFIX_BUILD})
+clear_if_changed(OGRE_PREFIX_WATCH ${OGRE_RESET_VARS})
+
+if(NOT OGRE_STATIC)
+	# try to locate Ogre via pkg-config
+	use_pkgconfig(OGRE_PKGC "OGRE19${OGRE_LIB_SUFFIX}")
+
+	# try to find framework on OSX
+	findpkg_framework(Ogre)
+else()
+	set(OGRE_LIBRARY_FWK "")
+endif()
+
+# locate Ogre include files
+find_path(OGRE_CONFIG_INCLUDE_DIR NAMES OgreBuildSettings.h HINTS ${OGRE_INC_SEARCH_PATH} ${OGRE_FRAMEWORK_INCLUDES} ${OGRE_PKGC_INCLUDE_DIRS} PATH_SUFFIXES "OGRE")
+find_path(OGRE_INCLUDE_DIR NAMES OgreRoot.h HINTS ${OGRE_CONFIG_INCLUDE_DIR} ${OGRE_INC_SEARCH_PATH} ${OGRE_FRAMEWORK_INCLUDES} ${OGRE_PKGC_INCLUDE_DIRS} PATH_SUFFIXES "OGRE")
+set(OGRE_INCOMPATIBLE FALSE)
+
+if (OGRE_INCLUDE_DIR)
+  if (NOT OGRE_CONFIG_INCLUDE_DIR)
+    set(OGRE_CONFIG_INCLUDE_DIR ${OGRE_INCLUDE_DIR})
+  endif ()
+  # determine Ogre version
+  file(READ ${OGRE_INCLUDE_DIR}/OgrePrerequisites.h OGRE_TEMP_VERSION_CONTENT)
+  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_MAJOR OGRE_VERSION_MAJOR)
+  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_MINOR OGRE_VERSION_MINOR)
+  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_PATCH OGRE_VERSION_PATCH)
+  get_preprocessor_entry(OGRE_TEMP_VERSION_CONTENT OGRE_VERSION_NAME OGRE_VERSION_NAME)
+  set(OGRE_VERSION "${OGRE_VERSION_MAJOR}.${OGRE_VERSION_MINOR}.${OGRE_VERSION_PATCH}")
+  pkg_message(OGRE "Found Ogre ${OGRE_VERSION_NAME} (${OGRE_VERSION})")
+
+  # determine configuration settings
+  set(OGRE_CONFIG_HEADERS
+    ${OGRE_CONFIG_INCLUDE_DIR}/OgreBuildSettings.h
+    ${OGRE_CONFIG_INCLUDE_DIR}/OgreConfig.h
+  )
+  foreach(CFG_FILE ${OGRE_CONFIG_HEADERS})
+    if (EXISTS ${CFG_FILE})
+      set(OGRE_CONFIG_HEADER ${CFG_FILE})
+      break()
+    endif()
+  endforeach()
+  if (OGRE_CONFIG_HEADER)
+    file(READ ${OGRE_CONFIG_HEADER} OGRE_TEMP_CONFIG_CONTENT)
+    has_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_STATIC_LIB OGRE_CONFIG_STATIC)
+    get_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_THREAD_SUPPORT OGRE_CONFIG_THREADS)
+    get_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_THREAD_PROVIDER OGRE_CONFIG_THREAD_PROVIDER)
+    get_preprocessor_entry(OGRE_TEMP_CONFIG_CONTENT OGRE_NO_FREEIMAGE OGRE_CONFIG_FREEIMAGE)
+    if (OGRE_CONFIG_STATIC AND OGRE_STATIC)
+    elseif (OGRE_CONFIG_STATIC OR OGRE_STATIC)
+      pkg_message(OGRE "Build type (static, dynamic) does not match the requested one.")
+      set(OGRE_INCOMPATIBLE TRUE)
+    endif ()
+  else ()
+    pkg_message(OGRE "Could not determine Ogre build configuration.")
+    set(OGRE_INCOMPATIBLE TRUE)
+  endif ()
+else ()
+  set(OGRE_INCOMPATIBLE FALSE)
+endif ()
+
+if (NOT OGRE_SOURCE) # If using ogre sources, use the target names instead of library files to link.
+	find_library(OGRE_LIBRARY_REL NAMES ${OGRE_LIBRARY_NAMES} HINTS ${OGRE_LIB_SEARCH_PATH} ${OGRE_PKGC_LIBRARY_DIRS} ${OGRE_FRAMEWORK_SEARCH_PATH} PATH_SUFFIXES "" "Release" "RelWithDebInfo" "MinSizeRel")
+	find_library(OGRE_LIBRARY_DBG NAMES ${OGRE_LIBRARY_NAMES_DBG} HINTS ${OGRE_LIB_SEARCH_PATH} ${OGRE_PKGC_LIBRARY_DIRS} ${OGRE_FRAMEWORK_SEARCH_PATH} PATH_SUFFIXES "" "Debug")
+else()
+	if( NOT OGRE_LIBRARIES OR OGRE_LIBRARIES STREQUAL "" )
+		message( FATAL_ERROR "When using Ogre from sources, please specify target names in OGRE_LIBRARIES!" )
+	else()
+		message( "Using Ogre source instead of binary libraries - skipping library files search." )
+	endif()
+endif()
+
+make_library_set(OGRE_LIBRARY)
+
+if(APPLE)
+  set(OGRE_LIBRARY_DBG ${OGRE_LIB_SEARCH_PATH})
+endif()
+if (OGRE_INCOMPATIBLE)
+  set(OGRE_LIBRARY "NOTFOUND")
+endif ()
+
+set(OGRE_INCLUDE_DIR ${OGRE_CONFIG_INCLUDE_DIR} ${OGRE_INCLUDE_DIR})
+list(REMOVE_DUPLICATES OGRE_INCLUDE_DIR)
+findpkg_finish(OGRE)
+add_parent_dir(OGRE_INCLUDE_DIRS OGRE_INCLUDE_DIR)
+if (OGRE_SOURCE)
+	# If working from source rather than SDK, add samples include
+	set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} "${OGRE_SOURCE}/Samples/Common/include")
+endif()
+
+mark_as_advanced(OGRE_CONFIG_INCLUDE_DIR OGRE_MEDIA_DIR OGRE_PLUGIN_DIR_REL OGRE_PLUGIN_DIR_DBG)
+
+if (NOT OGRE_FOUND)
+  return()
+endif ()
+
+
+# look for required Ogre dependencies in case of static build and/or threading
+if (OGRE_STATIC)
+  set(OGRE_DEPS_FOUND TRUE)
+  find_package(Cg QUIET)
+  find_package(DirectX QUIET)
+  find_package(FreeImage QUIET)
+  find_package(Freetype QUIET)
+  find_package(OpenGL QUIET)
+  find_package(OpenGLES QUIET)
+  find_package(OpenGLES2 QUIET)
+  find_package(ZLIB QUIET)
+  find_package(ZZip QUIET)
+  if (UNIX AND NOT APPLE AND NOT ANDROID)
+    find_package(X11 QUIET)
+    find_library(XAW_LIBRARY NAMES Xaw Xaw7 PATHS ${DEP_LIB_SEARCH_DIR} ${X11_LIB_SEARCH_PATH})
+    if (NOT XAW_LIBRARY OR NOT X11_Xt_FOUND)
+      set(X11_FOUND FALSE)
+    endif ()
+  endif ()
+
+  set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${ZZip_LIBRARIES} ${ZLIB_LIBRARIES} ${FreeImage_LIBRARIES} ${FREETYPE_LIBRARIES})
+
+  if (APPLE AND NOT OGRE_BUILD_PLATFORM_APPLE_IOS AND NOT ANDROID)
+    set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${X11_LIBRARIES} ${X11_Xt_LIBRARIES} ${XAW_LIBRARY} ${X11_Xrandr_LIB} ${Carbon_LIBRARIES} ${Cocoa_LIBRARIES})
+  endif()
+  
+  if (NOT ZLIB_FOUND OR NOT ZZip_FOUND)
+    set(OGRE_DEPS_FOUND FALSE)
+  endif ()
+  if (NOT FreeImage_FOUND AND NOT OGRE_CONFIG_FREEIMAGE)
+    set(OGRE_DEPS_FOUND FALSE)
+  endif ()
+  if (NOT FREETYPE_FOUND)
+    set(OGRE_DEPS_FOUND FALSE)
+  endif ()
+  if (UNIX AND NOT APPLE AND NOT ANDROID)
+	if (NOT X11_FOUND)
+      set(OGRE_DEPS_FOUND FALSE)
+	endif ()
+  endif ()
+endif()
+  if (OGRE_CONFIG_THREADS)
+    if (OGRE_CONFIG_THREAD_PROVIDER EQUAL 1)
+      if (OGRE_STATIC)
+    	set(Boost_USE_STATIC_LIBS TRUE)
+    	if(OGRE_BUILD_PLATFORM_APPLE_IOS)
+          set(Boost_USE_MULTITHREADED OFF)
+        endif()
+      endif()
+      
+      set(OGRE_BOOST_COMPONENTS thread date_time)
+      find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)
+      if(Boost_FOUND AND Boost_VERSION GREATER 104900)
+        if(Boost_VERSION GREATER 105300)
+            set(OGRE_BOOST_COMPONENTS thread date_time system atomic chrono)
+        else()
+            set(OGRE_BOOST_COMPONENTS thread date_time system chrono)
+        endif()
+      endif()
+
+      find_package(Boost COMPONENTS ${OGRE_BOOST_COMPONENTS} QUIET)
+      if (NOT Boost_THREAD_FOUND)
+        set(OGRE_DEPS_FOUND FALSE)
+      else ()
+        set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${Boost_LIBRARIES})
+        set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})
+      endif ()
+    elseif (OGRE_CONFIG_THREAD_PROVIDER EQUAL 2)
+      find_package(POCO QUIET)
+      if (NOT POCO_FOUND)
+        set(OGRE_DEPS_FOUND FALSE)
+      else ()
+        set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${POCO_LIBRARIES})
+        set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} ${POCO_INCLUDE_DIRS})
+      endif ()
+    elseif (OGRE_CONFIG_THREAD_PROVIDER EQUAL 3)
+      find_package(TBB QUIET)
+      if (NOT TBB_FOUND)
+        set(OGRE_DEPS_FOUND FALSE)
+      else ()
+        set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${TBB_LIBRARIES})
+        set(OGRE_INCLUDE_DIRS ${OGRE_INCLUDE_DIRS} ${TBB_INCLUDE_DIRS})
+      endif ()
+    endif ()
+  endif ()
+if (OGRE_STATIC)
+  if (NOT OGRE_DEPS_FOUND)
+    pkg_message(OGRE "Could not find all required dependencies for the Ogre package.")
+    set(OGRE_FOUND FALSE)
+  endif ()
+endif ()
+
+if (NOT OGRE_FOUND)
+  return()
+endif ()
+
+
+get_filename_component(OGRE_LIBRARY_DIR_REL "${OGRE_LIBRARY_REL}" PATH)
+get_filename_component(OGRE_LIBRARY_DIR_DBG "${OGRE_LIBRARY_DBG}" PATH)
+set(OGRE_LIBRARY_DIRS ${OGRE_LIBRARY_DIR_REL} ${OGRE_LIBRARY_DIR_DBG})
+
+# find binaries
+if (NOT OGRE_STATIC)
+	if (WIN32)
+		find_file(OGRE_BINARY_REL NAMES "OgreMain.dll" HINTS ${OGRE_BIN_SEARCH_PATH}
+          PATH_SUFFIXES "" Release RelWithDebInfo MinSizeRel)
+		find_file(OGRE_BINARY_DBG NAMES "OgreMain_d.dll" HINTS ${OGRE_BIN_SEARCH_PATH}
+          PATH_SUFFIXES "" Debug )
+	endif()
+	mark_as_advanced(OGRE_BINARY_REL OGRE_BINARY_DBG)
+endif()
+
+
+#########################################################
+# Find Ogre components
+#########################################################
+
+set(OGRE_COMPONENT_SEARCH_PATH_REL 
+  ${OGRE_LIBRARY_DIR_REL}/..
+  ${OGRE_LIBRARY_DIR_REL}/../..
+  ${OGRE_BIN_SEARCH_PATH}
+)
+set(OGRE_COMPONENT_SEARCH_PATH_DBG
+  ${OGRE_LIBRARY_DIR_DBG}/..
+  ${OGRE_LIBRARY_DIR_DBG}/../..
+  ${OGRE_BIN_SEARCH_PATH}
+)
+
+macro(ogre_find_component COMPONENT HEADER)
+  findpkg_begin(OGRE_${COMPONENT})
+  find_path(OGRE_${COMPONENT}_INCLUDE_DIR NAMES ${HEADER} HINTS ${OGRE_INCLUDE_DIRS} ${OGRE_PREFIX_SOURCE} PATH_SUFFIXES ${COMPONENT} OGRE19/${COMPONENT} Components/${COMPONENT}/include)
+  set(OGRE_${COMPONENT}_LIBRARY_NAMES "Ogre19${COMPONENT}${OGRE_LIB_SUFFIX}")
+  get_debug_names(OGRE_${COMPONENT}_LIBRARY_NAMES)
+  find_library(OGRE_${COMPONENT}_LIBRARY_REL NAMES ${OGRE_${COMPONENT}_LIBRARY_NAMES} HINTS ${OGRE_LIBRARY_DIR_REL} PATH_SUFFIXES "" "Release" "RelWithDebInfo" "MinSizeRel")
+  find_library(OGRE_${COMPONENT}_LIBRARY_DBG NAMES ${OGRE_${COMPONENT}_LIBRARY_NAMES_DBG} HINTS ${OGRE_LIBRARY_DIR_DBG} PATH_SUFFIXES "" "Debug")
+  make_library_set(OGRE_${COMPONENT}_LIBRARY)
+  findpkg_finish(OGRE_${COMPONENT})
+  if (OGRE_${COMPONENT}_FOUND)
+    # find binaries
+    if (NOT OGRE_STATIC)
+	  if (WIN32)
+	    find_file(OGRE_${COMPONENT}_BINARY_REL NAMES "Ogre19${COMPONENT}.dll" HINTS ${OGRE_COMPONENT_SEARCH_PATH_REL} PATH_SUFFIXES "" bin bin/Release bin/RelWithDebInfo bin/MinSizeRel Release)
+	    find_file(OGRE_${COMPONENT}_BINARY_DBG NAMES "Ogre19${COMPONENT}_d.dll" HINTS ${OGRE_COMPONENT_SEARCH_PATH_DBG} PATH_SUFFIXES "" bin bin/Debug Debug)
+	  endif()
+	  mark_as_advanced(OGRE_${COMPONENT}_BINARY_REL OGRE_${COMPONENT}_BINARY_DBG)
+    endif()
+  endif()
+endmacro()
+
+# look for Paging component
+ogre_find_component(Paging OgrePaging.h)
+# look for Terrain component
+ogre_find_component(Terrain OgreTerrain.h)
+# look for Property component
+ogre_find_component(Property OgreProperty.h)
+# look for RTShaderSystem component
+ogre_find_component(RTShaderSystem OgreRTShaderSystem.h)
+# look for Volume component
+ogre_find_component(Volume OgreVolumePrerequisites.h)
+# look for Overlay component
+ogre_find_component(Overlay OgreOverlaySystem.h)
+
+#########################################################
+# Find Ogre plugins
+#########################################################        
+macro(ogre_find_plugin PLUGIN HEADER)
+  # On Unix, the plugins might have no prefix
+  if (CMAKE_FIND_LIBRARY_PREFIXES)
+    set(TMP_CMAKE_LIB_PREFIX ${CMAKE_FIND_LIBRARY_PREFIXES})
+    set(CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_FIND_LIBRARY_PREFIXES} "")
+  endif()
+  
+  # strip RenderSystem_ or Plugin_ prefix from plugin name
+  string(REPLACE "RenderSystem_" "" PLUGIN_TEMP ${PLUGIN})
+  string(REPLACE "Plugin_" "" PLUGIN_NAME ${PLUGIN_TEMP})
+  
+  # header files for plugins are not usually needed, but find them anyway if they are present
+  set(OGRE_PLUGIN_PATH_SUFFIXES
+    PlugIns PlugIns/${PLUGIN_NAME} Plugins Plugins/${PLUGIN_NAME} ${PLUGIN} 
+    RenderSystems RenderSystems/${PLUGIN_NAME} ${ARGN})
+  find_path(OGRE_${PLUGIN}_INCLUDE_DIR NAMES ${HEADER} 
+    HINTS ${OGRE_INCLUDE_DIRS} ${OGRE_PREFIX_SOURCE}  
+    PATH_SUFFIXES ${OGRE_PLUGIN_PATH_SUFFIXES})
+  # find link libraries for plugins
+  set(OGRE_${PLUGIN}_LIBRARY_NAMES "${PLUGIN}${OGRE_LIB_SUFFIX}")
+  get_debug_names(OGRE_${PLUGIN}_LIBRARY_NAMES)
+  set(OGRE_${PLUGIN}_LIBRARY_FWK ${OGRE_LIBRARY_FWK})
+  find_library(OGRE_${PLUGIN}_LIBRARY_REL NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES}
+    HINTS "${OGRE_BUILD}/lib" ${OGRE_LIBRARY_DIRS} PATH_SUFFIXES "" OGRE opt Release Release/opt RelWithDebInfo RelWithDebInfo/opt MinSizeRel MinSizeRel/opt)
+  find_library(OGRE_${PLUGIN}_LIBRARY_DBG NAMES ${OGRE_${PLUGIN}_LIBRARY_NAMES_DBG}
+    HINTS "${OGRE_BUILD}/lib" ${OGRE_LIBRARY_DIRS} PATH_SUFFIXES "" OGRE opt Debug Debug/opt)
+  make_library_set(OGRE_${PLUGIN}_LIBRARY)
+
+  if (OGRE_${PLUGIN}_LIBRARY OR OGRE_${PLUGIN}_INCLUDE_DIR)
+    set(OGRE_${PLUGIN}_FOUND TRUE)
+    if (OGRE_${PLUGIN}_INCLUDE_DIR)
+      set(OGRE_${PLUGIN}_INCLUDE_DIRS ${OGRE_${PLUGIN}_INCLUDE_DIR})
+    endif()
+    set(OGRE_${PLUGIN}_LIBRARIES ${OGRE_${PLUGIN}_LIBRARY})
+  endif ()
+
+  mark_as_advanced(OGRE_${PLUGIN}_INCLUDE_DIR OGRE_${PLUGIN}_LIBRARY_REL OGRE_${PLUGIN}_LIBRARY_DBG OGRE_${PLUGIN}_LIBRARY_FWK)
+
+  # look for plugin dirs
+  if (OGRE_${PLUGIN}_FOUND)
+    if (NOT OGRE_PLUGIN_DIR_REL OR NOT OGRE_PLUGIN_DIR_DBG)
+      if (WIN32)
+        set(OGRE_PLUGIN_SEARCH_PATH_REL 
+          ${OGRE_LIBRARY_DIR_REL}/..
+          ${OGRE_LIBRARY_DIR_REL}/../..
+		  ${OGRE_BIN_SEARCH_PATH}
+        )
+        set(OGRE_PLUGIN_SEARCH_PATH_DBG
+          ${OGRE_LIBRARY_DIR_DBG}/..
+          ${OGRE_LIBRARY_DIR_DBG}/../..
+		  ${OGRE_BIN_SEARCH_PATH}
+        )
+        find_path(OGRE_PLUGIN_DIR_REL NAMES "${PLUGIN}.dll" HINTS ${OGRE_PLUGIN_SEARCH_PATH_REL}
+          PATH_SUFFIXES "" bin bin/Release bin/RelWithDebInfo bin/MinSizeRel Release)
+        find_path(OGRE_PLUGIN_DIR_DBG NAMES "${PLUGIN}_d.dll" HINTS ${OGRE_PLUGIN_SEARCH_PATH_DBG}
+          PATH_SUFFIXES "" bin bin/Debug Debug)
+      elseif (UNIX)
+        get_filename_component(OGRE_PLUGIN_DIR_TMP ${OGRE_${PLUGIN}_LIBRARY_REL} PATH)
+        set(OGRE_PLUGIN_DIR_REL ${OGRE_PLUGIN_DIR_TMP} CACHE STRING "Ogre plugin dir (release)" FORCE)
+	    get_filename_component(OGRE_PLUGIN_DIR_TMP ${OGRE_${PLUGIN}_LIBRARY_DBG} PATH)
+        set(OGRE_PLUGIN_DIR_DBG ${OGRE_PLUGIN_DIR_TMP} CACHE STRING "Ogre plugin dir (debug)" FORCE)  
+      endif ()
+    endif ()
+	
+	# find binaries
+	if (NOT OGRE_STATIC)
+		if (WIN32)
+			find_file(OGRE_${PLUGIN}_REL NAMES "${PLUGIN}.dll" HINTS ${OGRE_PLUGIN_DIR_REL})
+			find_file(OGRE_${PLUGIN}_DBG NAMES "${PLUGIN}_d.dll" HINTS ${OGRE_PLUGIN_DIR_DBG})
+		endif()
+		mark_as_advanced(OGRE_${PLUGIN}_REL OGRE_${PLUGIN}_DBG)
+	endif()
+	
+  endif ()
+
+  if (TMP_CMAKE_LIB_PREFIX)
+    set(CMAKE_FIND_LIBRARY_PREFIXES ${TMP_CMAKE_LIB_PREFIX})
+  endif ()
+endmacro(ogre_find_plugin)
+
+ogre_find_plugin(Plugin_PCZSceneManager OgrePCZSceneManager.h PCZ PlugIns/PCZSceneManager/include)
+ogre_find_plugin(Plugin_OctreeZone OgreOctreeZone.h PCZ PlugIns/OctreeZone/include)
+ogre_find_plugin(Plugin_BSPSceneManager OgreBspSceneManager.h PlugIns/BSPSceneManager/include)
+ogre_find_plugin(Plugin_CgProgramManager OgreCgProgram.h PlugIns/CgProgramManager/include)
+ogre_find_plugin(Plugin_OctreeSceneManager OgreOctreeSceneManager.h PlugIns/OctreeSceneManager/include)
+ogre_find_plugin(Plugin_ParticleFX OgreParticleFXPrerequisites.h PlugIns/ParticleFX/include)
+ogre_find_plugin(RenderSystem_GL OgreGLRenderSystem.h RenderSystems/GL/include)
+ogre_find_plugin(RenderSystem_GL3Plus OgreGL3PlusRenderSystem.h RenderSystems/GL3Plus/include)
+ogre_find_plugin(RenderSystem_GLES OgreGLESRenderSystem.h RenderSystems/GLES/include)
+ogre_find_plugin(RenderSystem_GLES2 OgreGLES2RenderSystem.h RenderSystems/GLES2/include)
+ogre_find_plugin(RenderSystem_Direct3D9 OgreD3D9RenderSystem.h RenderSystems/Direct3D9/include)
+ogre_find_plugin(RenderSystem_Direct3D11 OgreD3D11RenderSystem.h RenderSystems/Direct3D11/include)
+        
+if (OGRE_STATIC)
+  # check if dependencies for plugins are met
+  if (NOT DirectX_FOUND)
+    set(OGRE_RenderSystem_Direct3D9_FOUND FALSE)
+  endif ()
+  if (NOT DirectX_D3D11_FOUND)
+    set(OGRE_RenderSystem_Direct3D11_FOUND FALSE)
+  endif ()
+  if (NOT OPENGL_FOUND)
+    set(OGRE_RenderSystem_GL_FOUND FALSE)
+  endif ()
+  if (NOT OPENGL_FOUND)
+    set(OGRE_RenderSystem_GL3Plus_FOUND FALSE)
+  endif ()
+  if (NOT OPENGLES_FOUND)
+    set(OGRE_RenderSystem_GLES_FOUND FALSE)
+  endif ()
+  if (NOT OPENGLES2_FOUND)
+    set(OGRE_RenderSystem_GLES2_FOUND FALSE)
+  endif ()
+  if (NOT Cg_FOUND)
+    set(OGRE_Plugin_CgProgramManager_FOUND FALSE)
+  endif ()
+  
+  set(OGRE_RenderSystem_Direct3D9_LIBRARIES ${OGRE_RenderSystem_Direct3D9_LIBRARIES}
+    ${DirectX_LIBRARIES}
+  )
+
+  set(OGRE_RenderSystem_Direct3D11_LIBRARIES ${OGRE_RenderSystem_Direct3D11_LIBRARIES}
+    ${DirectX_D3D11_LIBRARIES}
+  )
+  set(OGRE_RenderSystem_GL_LIBRARIES ${OGRE_RenderSystem_GL_LIBRARIES}
+    ${OPENGL_LIBRARIES}
+  )
+  set(OGRE_RenderSystem_GL3Plus_LIBRARIES ${OGRE_RenderSystem_GL3Plus_LIBRARIES}
+    ${OPENGL_LIBRARIES}
+  )
+  set(OGRE_RenderSystem_GLES_LIBRARIES ${OGRE_RenderSystem_GLES_LIBRARIES}
+    ${OPENGLES_LIBRARIES}
+  )
+  set(OGRE_RenderSystem_GLES2_LIBRARIES ${OGRE_RenderSystem_GLES2_LIBRARIES}
+    ${OPENGLES2_LIBRARIES}
+  )
+  set(OGRE_Plugin_CgProgramManager_LIBRARIES ${OGRE_Plugin_CgProgramManager_LIBRARIES}
+    ${Cg_LIBRARIES}
+  )
+endif ()
+
+# look for the media directory
+set(OGRE_MEDIA_SEARCH_PATH
+  ${OGRE_SOURCE}
+  ${OGRE_LIBRARY_DIR_REL}/..
+  ${OGRE_LIBRARY_DIR_DBG}/..
+  ${OGRE_LIBRARY_DIR_REL}/../..
+  ${OGRE_LIBRARY_DIR_DBG}/../..
+  ${OGRE_PREFIX_SOURCE}
+)
+set(OGRE_MEDIA_SEARCH_SUFFIX
+  Samples/Media
+  Media
+  media
+  share/OGRE19/media
+  share/OGRE19/Media
+)
+
+clear_if_changed(OGRE_PREFIX_WATCH OGRE_MEDIA_DIR)
+find_path(OGRE_MEDIA_DIR NAMES packs/cubemapsJS.zip HINTS ${OGRE_MEDIA_SEARCH_PATH}
+  PATHS ${OGRE_PREFIX_PATH} PATH_SUFFIXES ${OGRE_MEDIA_SEARCH_SUFFIX})
+
