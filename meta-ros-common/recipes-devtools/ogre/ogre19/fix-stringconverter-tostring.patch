Resolve Ogre::StringConverter::toString cannot be overloaded

The GNU compiler produces errors for Ogre::StringConverter::toString being
overloaded due to ambiguity around size_t and long unsigned int.

The changes to fix this problem can be found in these upstream commits:

  Main: deprecate complex StringConverter::toString for integer types
  f8d190183bbb7133cd6070be4f63923ad675c511

  clean up OgreStringConverter and fix setting of std::ios::hex
  742102705ee16362a33b676ad23be8356401553e

This selective backport takes the relevant parts of the patches to resolve
the specific compiler error.

Upstream-Status: Backport

Signed-off-by: Rob Woolley <rob.woolley@windriver.com>

diff --git a/OgreMain/include/OgreStringConverter.h b/OgreMain/include/OgreStringConverter.h
index c6e9201e8f..3096a4a471 100644
--- a/OgreMain/include/OgreStringConverter.h
+++ b/OgreMain/include/OgreStringConverter.h
@@ -68,22 +68,22 @@ namespace Ogre {
     class _OgreExport StringConverter
     {
     public:
+        static String toString(int32 val) { return std::to_string(val); };
+        static String toString(uint32 val) { return std::to_string(val); };
+        static String toString(unsigned long val) { return std::to_string(val); };
+        static String toString(unsigned long long val) { return std::to_string(val); };
+        static String toString(long val) { return std::to_string(val); };
 
-        /** Converts a Real to a String. */
-        static String toString(Real val, unsigned short precision = 6, 
-            unsigned short width = 0, char fill = ' ', 
-            std::ios::fmtflags flags = std::ios::fmtflags(0));
-#if OGRE_DOUBLE_PRECISION == 1
         /** Converts a float to a String. */
         static String toString(float val, unsigned short precision = 6,
                                unsigned short width = 0, char fill = ' ',
                                std::ios::fmtflags flags = std::ios::fmtflags(0));
-#else
+
         /** Converts a double to a String. */
         static String toString(double val, unsigned short precision = 6,
                                unsigned short width = 0, char fill = ' ',
                                std::ios::fmtflags flags = std::ios::fmtflags(0));
-#endif
+
         /** Converts a Radian to a String. */
         static String toString(Radian val, unsigned short precision = 6, 
             unsigned short width = 0, char fill = ' ', 
@@ -98,39 +98,29 @@ namespace Ogre {
         {
             return toString(val.valueAngleUnits(), precision, width, fill, flags);
         }
-        /** Converts an int to a String. */
-        static String toString(int val, unsigned short width = 0, 
+        /// @deprecated use StringUtil::format
+        OGRE_DEPRECATED static String toString(int32 val, unsigned short width,
             char fill = ' ', 
             std::ios::fmtflags flags = std::ios::fmtflags(0));
-#if OGRE_PLATFORM != OGRE_PLATFORM_NACL &&  ( OGRE_ARCH_TYPE == OGRE_ARCHITECTURE_64 || OGRE_PLATFORM == OGRE_PLATFORM_APPLE || OGRE_PLATFORM == OGRE_PLATFORM_APPLE_IOS )
-        /** Converts an unsigned int to a String. */
-        static String toString(unsigned int val, 
-            unsigned short width = 0, char fill = ' ', 
+        /// @deprecated use StringUtil::format
+        OGRE_DEPRECATED static String toString(uint32 val, unsigned short width,
+            char fill = ' ',
             std::ios::fmtflags flags = std::ios::fmtflags(0));
-        /** Converts a size_t to a String. */
-        static String toString(size_t val, 
-            unsigned short width = 0, char fill = ' ', 
+        // provide both long long and long to catch size_t on all platforms
+        /// @deprecated use StringUtil::format
+        OGRE_DEPRECATED static String toString(unsigned long val,
+            unsigned short width, char fill = ' ',
             std::ios::fmtflags flags = std::ios::fmtflags(0));
-        #if OGRE_COMPILER == OGRE_COMPILER_MSVC
-        /** Converts an unsigned long to a String. */
-        static String toString(unsigned long val, 
-            unsigned short width = 0, char fill = ' ', 
+        /// @deprecated use StringUtil::format
+        OGRE_DEPRECATED static String toString(unsigned long long val,
+            unsigned short width, char fill = ' ',
             std::ios::fmtflags flags = std::ios::fmtflags(0));
-        #endif
-#else
-        /** Converts a size_t to a String. */
-        static String toString(size_t val, 
-            unsigned short width = 0, char fill = ' ', 
-            std::ios::fmtflags flags = std::ios::fmtflags(0));
-        /** Converts an unsigned long to a String. */
-        static String toString(unsigned long val, 
-            unsigned short width = 0, char fill = ' ', 
-            std::ios::fmtflags flags = std::ios::fmtflags(0));
-#endif
-        /** Converts a long to a String. */
-        static String toString(long val, 
-            unsigned short width = 0, char fill = ' ', 
+
+        /// @deprecated use StringUtil::format
+        OGRE_DEPRECATED static String toString(long val,
+            unsigned short width, char fill = ' ',
             std::ios::fmtflags flags = std::ios::fmtflags(0));
+
         /** Converts a boolean to a String. 
         @param yesNo If set to true, result is 'yes' or 'no' instead of 'true' or 'false'
         */
@@ -291,6 +281,10 @@ namespace Ogre {
         static String msDefaultStringLocale;
         static std::locale msLocale;
         static bool msUseLocale;
+
+    private:
+        template<typename T>
+        static String _toString(T val, uint16 width, char fill, std::ios::fmtflags flags);
     };
 
     /** @} */
diff --git a/OgreMain/src/OgreStringConverter.cpp b/OgreMain/src/OgreStringConverter.cpp
index 2123f1b1b3..03838e0d0a 100644
--- a/OgreMain/src/OgreStringConverter.cpp
+++ b/OgreMain/src/OgreStringConverter.cpp
@@ -34,23 +34,24 @@ namespace Ogre {
     std::locale StringConverter::msLocale = std::locale(msDefaultStringLocale.c_str());
     bool StringConverter::msUseLocale = false;
 
-    //-----------------------------------------------------------------------
-    String StringConverter::toString(Real val, unsigned short precision, 
-        unsigned short width, char fill, std::ios::fmtflags flags)
+    template<typename T>
+    String StringConverter::_toString(T val, uint16 width, char fill, std::ios::fmtflags flags)
     {
         StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.precision(precision);
         stream.width(width);
         stream.fill(fill);
-        if (flags)
+        if (flags & std::ios::basefield) {
+            stream.setf(flags, std::ios::basefield);
+            stream.setf((flags & ~std::ios::basefield) | std::ios::showbase);
+        }
+        else if (flags)
             stream.setf(flags);
+
         stream << val;
 
         return stream.str();
     }
-#if OGRE_DOUBLE_PRECISION == 1
+
     //-----------------------------------------------------------------------
     String StringConverter::toString(float val, unsigned short precision,
                                      unsigned short width, char fill, std::ios::fmtflags flags)
@@ -66,7 +67,7 @@ namespace Ogre {
         stream << val;
         return stream.str();
     }
-#else
+
     //-----------------------------------------------------------------------
     String StringConverter::toString(double val, unsigned short precision,
                                      unsigned short width, char fill, std::ios::fmtflags flags)
@@ -82,110 +83,36 @@ namespace Ogre {
         stream << val;
         return stream.str();
     }
-#endif
+
     //-----------------------------------------------------------------------
-    String StringConverter::toString(int val, 
+    String StringConverter::toString(int32 val,
         unsigned short width, char fill, std::ios::fmtflags flags)
     {
-        StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.width(width);
-        stream.fill(fill);
-        if (flags)
-            stream.setf(flags);
-        stream << val;
-        return stream.str();
+        return _toString(val, width, fill, flags);
     }
     //-----------------------------------------------------------------------
-#if OGRE_PLATFORM != OGRE_PLATFORM_NACL &&  ( OGRE_ARCH_TYPE == OGRE_ARCHITECTURE_64 || OGRE_PLATFORM == OGRE_PLATFORM_APPLE || OGRE_PLATFORM == OGRE_PLATFORM_APPLE_IOS )
-    String StringConverter::toString(unsigned int val, 
+    String StringConverter::toString(uint32 val,
         unsigned short width, char fill, std::ios::fmtflags flags)
     {
-        StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.width(width);
-        stream.fill(fill);
-        if (flags)
-            stream.setf(flags);
-        stream << val;
-        return stream.str();
+        return _toString(val, width, fill, flags);
     }
     //-----------------------------------------------------------------------
-    String StringConverter::toString(size_t val, 
+    String StringConverter::toString(unsigned long val,
         unsigned short width, char fill, std::ios::fmtflags flags)
     {
-        StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.width(width);
-        stream.fill(fill);
-        if (flags)
-            stream.setf(flags);
-        stream << val;
-        return stream.str();
+        return _toString(val, width, fill, flags);
     }
-#if OGRE_COMPILER == OGRE_COMPILER_MSVC
     //-----------------------------------------------------------------------
-    String StringConverter::toString(unsigned long val, 
+    String StringConverter::toString(unsigned long long val,
         unsigned short width, char fill, std::ios::fmtflags flags)
     {
-        StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.width(width);
-        stream.fill(fill);
-        if (flags)
-            stream.setf(flags);
-        stream << val;
-        return stream.str();
+        return _toString(val, width, fill, flags);
     }
-
-#endif
     //-----------------------------------------------------------------------
-#else
-    String StringConverter::toString(size_t val, 
+    String StringConverter::toString(long val,
         unsigned short width, char fill, std::ios::fmtflags flags)
     {
-        StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.width(width);
-        stream.fill(fill);
-        if (flags)
-            stream.setf(flags);
-        stream << val;
-        return stream.str();
-    }
-    //-----------------------------------------------------------------------
-    String StringConverter::toString(unsigned long val, 
-        unsigned short width, char fill, std::ios::fmtflags flags)
-    {
-        StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.width(width);
-        stream.fill(fill);
-        if (flags)
-            stream.setf(flags);
-        stream << val;
-        return stream.str();
-    }
-    //-----------------------------------------------------------------------
-#endif
-    String StringConverter::toString(long val, 
-        unsigned short width, char fill, std::ios::fmtflags flags)
-    {
-        StringStream stream;
-        if (msUseLocale)
-            stream.imbue(msLocale);
-        stream.width(width);
-        stream.fill(fill);
-        if (flags)
-            stream.setf(flags);
-        stream << val;
-        return stream.str();
+        return _toString(val, width, fill, flags);
     }
     //-----------------------------------------------------------------------
     String StringConverter::toString(const Vector2& val)
