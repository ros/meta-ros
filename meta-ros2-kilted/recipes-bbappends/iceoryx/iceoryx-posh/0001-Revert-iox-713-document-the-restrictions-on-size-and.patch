From 0efa7d363cf3071e71708b6d1bbd0cca72f92ec9 Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Mon, 24 May 2021 15:41:38 +0000
Subject: [PATCH] Revert "iox-#713 document the restrictions on size and
 alignment of RelativePointerData and ShmSafeUnmanagedChunk"

This reverts commit 48baea6323a6b34db465ed8341cd1446661f1704.

Doesn't work in cross-compile build

/jenkins/mjansa/build/ros/webos-rolling-honister/tmp-glibc/work/qemux86-webos-linux/iceoryx-posh/1.0.0-2-r0/git/source/mepoo/chunk_header.cpp: In constructor 'iox::mepoo::ChunkHeader::ChunkHeader(uint32_t, const iox::mepoo::ChunkSettings&)':
/jenkins/mjansa/build/ros/webos-rolling-honister/tmp-glibc/work/qemux86-webos-linux/iceoryx-posh/1.0.0-2-r0/git/source/mepoo/chunk_header.cpp:32:40: error: static assertion failed: All the calculations expect the ChunkHeader alignment to be at least 8!
   32 |     static_assert(alignof(ChunkHeader) >= 8U,
      |                   ~~~~~~~~~~~~~~~~~~~~~^~~~~

/jenkins/mjansa/build/ros/webos-rolling-honister/tmp-glibc/work/qemux86-webos-linux/iceoryx-posh/1.0.0-2-r0/git/source/mepoo/shm_safe_unmanaged_chunk.cpp:31:45: error: static assertion failed: A ShmSafeUnmanagedChunk must be placed on an address which does not cross the native alignment!
   31 | static_assert(sizeof(ShmSafeUnmanagedChunk) == alignof(ShmSafeUnmanagedChunk),
      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Upstream-Status: Pending

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 source/mepoo/shm_safe_unmanaged_chunk.cpp | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/source/mepoo/shm_safe_unmanaged_chunk.cpp b/source/mepoo/shm_safe_unmanaged_chunk.cpp
index 73f2a7d..a6c85f0 100644
--- a/source/mepoo/shm_safe_unmanaged_chunk.cpp
+++ b/source/mepoo/shm_safe_unmanaged_chunk.cpp
@@ -20,18 +20,8 @@ namespace iox
 {
 namespace mepoo
 {
-// Torn writes are problematic since RouDi needs to cleanup all chunks when an application crashes. If the size is
-// larger than 8 bytes on a 64 bit system, torn writes happens and the data is only partially written when the
-// application crashes at the wrong time. RouDi would then read corrupt data and try to access invalid memory.
 static_assert(sizeof(ShmSafeUnmanagedChunk) <= 8U,
               "The ShmSafeUnmanagedChunk size must not exceed 64 bit to prevent torn writes!");
-// This ensures that the address of the ShmSafeUnmanagedChunk object is appropriately aligned to be accessed within one
-// CPU cycle, i.e. if the size is 8 and the alignment is 4 it could be placed at an address with modulo 4 which would
-// also result in torn writes.
-static_assert(sizeof(ShmSafeUnmanagedChunk) == alignof(ShmSafeUnmanagedChunk),
-              "A ShmSafeUnmanagedChunk must be placed on an address which does not cross the native alignment!");
-// This is important for the use in the SOFI where under some conditions the copy operation could work on partially
-// obsolet data and therefore non-trivial copy ctor/assignment operator or dtor would work on corrupted data.
 static_assert(std::is_trivially_copyable<ShmSafeUnmanagedChunk>::value,
               "The ShmSafeUnmanagedChunk must be trivially copyable to prevent Frankenstein objects when the copy ctor "
               "works on half dead objects!");
