From 224e197b2dff3467e381d69473614721e5a71c43 Mon Sep 17 00:00:00 2001
From: Martin Jansa <martin.jansa@lge.com>
Date: Thu, 5 Nov 2020 12:32:28 -0800
Subject: [PATCH] {rolling} pybind11-vendor: don't build pybind11, use platform
 recipe python3-pybind11

Upstream-Status: Pending

Signed-off-by: Martin Jansa <martin.jansa@lge.com>
---
 CMakeLists.txt | 69 ++------------------------------------------------
 1 file changed, 2 insertions(+), 67 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9b79b46..5c3fc18 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,70 +4,5 @@ project(pybind11_vendor)
 
 find_package(ament_cmake REQUIRED)
 
-macro(build_pybind11)
-  set(extra_cmake_args)
-
-  # CMAKE_BUILD_TYPE was removed in ros2:pybind11_vendor#3 to eliminate warning
-  # on Windows about unused variable. It is only used for tests, which we are
-  # not building, and in pybind11Tools.cmake for Linux and Mac. In any case,
-  # pybind11 is a headers-only class and does not require building at the time
-  # of this vendor package, thus does not require passing in the variable here.
-  # It will use the variable value in packages that depend on it for compiling.
-
-  if(DEFINED CMAKE_TOOLCHAIN_FILE)
-    list(APPEND extra_cmake_args "-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}")
-    if(ANDROID)
-      if(DEFINED ANDROID_ABI)
-        list(APPEND extra_cmake_args "-DANDROID_ABI=${ANDROID_ABI}")
-      endif()
-      if(DEFINED ANDROID_CPP_FEATURES)
-        list(APPEND extra_cmake_args "-DANDROID_CPP_FEATURES=${ANDROID_CPP_FEATURES}")
-      endif()
-      if(DEFINED ANDROID_FUNCTION_LEVEL_LINKING)
-        list(APPEND extra_cmake_args "-DANDROID_FUNCTION_LEVEL_LINKING=${ANDROID_FUNCTION_LEVEL_LINKING}")
-      endif()
-      if(DEFINED ANDROID_NATIVE_API_LEVEL)
-        list(APPEND extra_cmake_args "-DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}")
-      endif()
-      if(DEFINED ANDROID_NDK)
-        list(APPEND extra_cmake_args "-DANDROID_NDK=${ANDROID_NDK}")
-      endif()
-      if(DEFINED ANDROID_STL)
-        list(APPEND extra_cmake_args "-DANDROID_STL=${ANDROID_STL}")
-      endif()
-      if(DEFINED ANDROID_TOOLCHAIN_NAME)
-        list(APPEND extra_cmake_args "-DANDROID_TOOLCHAIN_NAME=${ANDROID_TOOLCHAIN_NAME}")
-      endif()
-    endif()
-  else()
-    list(APPEND extra_cmake_args "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
-  endif()
-  list(APPEND extra_cmake_args "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
-
-
-  include(ExternalProject)
-  ExternalProject_Add(pybind11-2.5.0
-    URL https://github.com/pybind/pybind11/archive/v2.5.0.tar.gz
-    URL_MD5 1ad2c611378fb440e8550a7eb6b31b89
-    TIMEOUT 600
-    CMAKE_ARGS
-      -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}_install
-      -DPYBIND11_TEST=OFF
-      ${extra_cmake_args}
-  )
-
-  # The external project will install to the build folder, but we'll install that on make install.
-  install(
-    DIRECTORY
-      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}_install/
-    DESTINATION
-      ${CMAKE_INSTALL_PREFIX}
-    USE_SOURCE_PERMISSIONS
-  )
-endmacro()
-
-# Currently, always build.
-# This could be improved with logic to use installed platform packages.
-build_pybind11()
 
 ament_package()
