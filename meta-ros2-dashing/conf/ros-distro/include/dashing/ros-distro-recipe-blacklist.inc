# dashing/ros-distro-recipe-blacklist.inc
#
# Copyright (c) 2019-2021 LG Electronics, Inc.

SKIP_RECIPE[ament-clang-format-native] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'clang', 'clang-format: depends on clang-format', '', d)}"
SKIP_RECIPE[ament-clang-format] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'clang', 'clang-format: depends on clang-format', '', d)}"
SKIP_RECIPE[ament-clang-tidy-native] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'clang', 'clang: depends on clang-tidy', '', d)}"
SKIP_RECIPE[ament-clang-tidy] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'clang', 'clang: depends on clang-tidy', '', d)}"
SKIP_RECIPE[ament-cmake-clang-format] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'clang', 'clang: depends on ament-clang-format-native->clang-format', '', d)}"
SKIP_RECIPE[ament-cmake-clang-tidy] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'clang', 'clang: depends on ament-clang-tidy-native->clang-tidy', '', d)}"
SKIP_RECIPE[bond-core] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'bondcpp', 'bondcpp: rdepends on bondcpp which is not compatible with rclcpp currently in dashing, see https://github.com/ros/bond_core/commit/99e8e634178e8ffcfe5d32242f9ff8886526fa06#r45245551', '', d)}"
SKIP_RECIPE[bondcpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'bondcpp', 'bondcpp: not compatible with rclcpp currently in dashing, see https://github.com/ros/bond_core/commit/99e8e634178e8ffcfe5d32242f9ff8886526fa06#r45245551', '', d)}"
SKIP_RECIPE[connext-cmake-module-native] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'connext', 'connext: depends on rti-connext-dds-native which is not available', '', d)}"
SKIP_RECIPE[connext-cmake-module] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'connext', 'connext: depends on rti-connext-dds which is not available', '', d)}"
SKIP_RECIPE[cross-compile] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'docker', 'docker: depends on python3-docker which is available in meta-virtualization', '', d)}"
SKIP_RECIPE[desktop] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11', 'pendulum-control'], 'qt5: depends on (rqt-common-plugins,rviz-default-plugins)->qtbase; x11: depends on rviz-default-plugins->rviz-common->rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES; pendulum-control: depends on pendulum-control which is not compatible with glibc-2.34', '', d)}"
SKIP_RECIPE[dolly] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on dolly-gazebo->gazebo-ros-pkgs->gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[dolly-gazebo] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on gazebo-ros-pkgs->gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[gazebo-plugins] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[gazebo-ros-pkgs] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[gazebo-ros] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[gazebo-rosdev] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on gazebo which is not available', '', d)}"
SKIP_RECIPE[gurumdds-cmake-module] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gurumdds', 'gurumdds: depends on gurumdds-2.6 which is not available', '', d)}"
SKIP_RECIPE[h264-encoder-core] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['ffmpeg', 'x264'], 'ffmpeg: Depends on ffmpeg which requires commercial license; x264: Depends on ffmpeg which depends on x264 which requires commercial license', '', d)}"
SKIP_RECIPE[h264-video-encoder] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['ffmpeg', 'x264'], 'ffmpeg: Depends on h264-encoder-core->ffmpeg which requires commercial license; x264: Depends on ffmpeg which depends on x264 which requires commercial license', '', d)}"
SKIP_RECIPE[joint-state-publisher-gui] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding which depends on qtbase; pyqt5: depends on python-qt-binding which depends on python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[launch-ros-sandbox] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'docker', 'docker: depends on python3-docker which is available in meta-virtualization', '', d)}"
SKIP_RECIPE[launch-testing-ament-cmake] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'launch', 'launch: depends on launch-testing-native->launch-native', '', d)}"
SKIP_RECIPE[launch-testing-native] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'launch', 'launch: depends on launch-native', '', d)}"
SKIP_RECIPE[lanelet2-core] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'lanelet2-core', 'lanelet2-core: do_compile task fails with boost-1.77.0 https://github.com/fzi-forschungszentrum-informatik/Lanelet2/issues/211', '', d)}"
SKIP_RECIPE[lanelet2-examples] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'pugixml', 'Depends on lanelet2-io which depends on pugixml-dev which is not available', '', d)}"
SKIP_RECIPE[lanelet2-io] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'pugixml', 'Depends on pugixml-dev which is not available', '', d)}"
SKIP_RECIPE[lanelet2-maps] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'lanelet2-core', 'lanelet2-core: depends on lanelet2-core which fails in do_compile task with boost-1.77.0 https://github.com/fzi-forschungszentrum-informatik/Lanelet2/issues/211', '', d)}"
SKIP_RECIPE[lanelet2-projection] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'pugixml', 'Depends on lanelet2-io which depends on pugixml-dev which is not available', '', d)}"
SKIP_RECIPE[lanelet2-python] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'pugixml', 'Depends on lanelet2-io which depends on pugixml-dev which is not available', '', d)}"
SKIP_RECIPE[lanelet2-routing] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'lanelet2-traffic-rules', 'lanelet2-traffic-rules: depends on lanelet2-traffic-rules which fails in do_configure', '', d)}"
SKIP_RECIPE[lanelet2-traffic-rules] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'lanelet2-traffic-rules', 'lanelet2-traffic-rules: do_configure task fails: ', '', d)}"
SKIP_RECIPE[lanelet2-validation] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'pugixml', 'Depends on lanelet2-io which depends on pugixml-dev which is not available', '', d)}"
SKIP_RECIPE[lanelet2] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'pugixml', 'Rdepends on lanelet2-python, lanelet2-projection, lanelet2-examples which depend on lanelet2-io which depends on pugixml-dev which is not available', '', d)}"
SKIP_RECIPE[librealsense2] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['opengl', 'glfw'], 'opengl: depends on mesa which is not available because of missing opengl or vulkan in DISTRO_FEATURES; glfw: Depends on glfw which is not available in zeus and older', '', d)}"
SKIP_RECIPE[mapviz] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'Requires libqt-rosdev->qtbase which requires meta-qt5 to be included and freeglut, libxmu, libxi which require x11; qt-gui-cpp: rdepends on rqt-gui-cpp which depends on qt-gui-cpp which requires pyqt5-native for sip', '', d)}"
SKIP_RECIPE[mapviz-plugins] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'Requires libqt-rosdev->qtbase which requires meta-qt5 to be included and depends on mapviz->(freeglut, libxmu, libxi) which require x11; qt-gui-cpp: depends on mapviz which rdepends on rqt-gui-cpp which depends on qt-gui-cpp which requires pyqt5-native for sip', '', d)}"
SKIP_RECIPE[multires-image] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'Requires libqt-rosdev->qtbase which requires meta-qt5 to be included and depends on mapviz->(freeglut, libxmu, libxi) which require x11; qt-gui-cpp: depends on mapviz which rdepends on rqt-gui-cpp which depends on qt-gui-cpp which requires pyqt5-native for sip', '', d)}"
SKIP_RECIPE[nav2-rviz-plugins] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on qtbase; x11: depends on rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[nav2-system-tests] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on gazebo-ros-pkgs->gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[octovis] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'qt4', 'qt4: depends on qt4 packages ROS_UNRESOLVED_DEP-libqt4-opengl-dev, ROS_UNRESOLVED_DEP-libqglviewer-qt4-dev, ROS_UNRESOLVED_DEP-libqt4-dev, ROS_UNRESOLVED_DEP-libqt4-opengl, ROS_UNRESOLVED_DEP-libqtgui4', '', d)}"
SKIP_RECIPE[opensplice-cmake-module] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'opensplice', 'opensplice: depends on libopensplice69 which is not available', '', d)}"
SKIP_RECIPE[packagegroup-ros-turtlebot3-extended] ?= "Depends on turtlebot3-autorace, turtlebot3-applications, turtlebot3-applications-msgs, slam-karto which exist in melodic where this packagegroup was originally used, but were never ported to dashing"
SKIP_RECIPE[pendulum-control] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'pendulum-control', 'pendulum-control: not compatible with glibc-2.34 without easy fix as reported in https://github.com/ros2/demos/issues/530', '', d)}"
SKIP_RECIPE[py-trees-js] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python3-pyqt5; pyqt5: depends on python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[py-trees-ros-tutorials] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python3-pyqt5; pyqt5: depends on python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[py-trees-ros-viewer] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python3-pyqt5; pyqt5: depends on python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[python-qt-binding] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qtbase; pyqt5: depends on python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[qt-dotgraph] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[qt-gui-app] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qt-gui->qtbase; pyqt5: depends on qt-gui->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[qt-gui-core] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qt-dotgraph->python-qt-binding->qtbase; pyqt5: depends on qt-dotgraph->python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[qt-gui-cpp] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[qt-gui-py-common] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[qt-gui] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qtbase; pyqt5: depends on python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[realsense-ros2-camera] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['opengl', 'glfw'], 'opengl: depends on librealsense2->mesa which is not available because of missing opengl or vulkan in DISTRO_FEATURES; glfw: Depends on librealsense2->glfw which is not available in zeus and older', '', d)}"
SKIP_RECIPE[rmw-connext-cpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'connext', 'connext: depends on rti-connext-dds which is not available', '', d)}"
SKIP_RECIPE[rmw-connext-shared-cpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'connext', 'connext: depends on rti-connext-dds which is not available', '', d)}"
SKIP_RECIPE[rmw-gurumdds-cpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gurumdds', 'gurumdds: depends on gurumdds-2.6 which is not available', '', d)}"
SKIP_RECIPE[rmw-gurumdds-shared-cpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gurumdds', 'gurumdds: depends on gurumdds-2.6 which is not available', '', d)}"
SKIP_RECIPE[rmw-opensplice-cpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'opensplice', 'opensplice: depends on libopensplice69 which is not available', '', d)}"
SKIP_RECIPE[ros-image-turtlebot3-all] ?= "Depends on packagegroup-ros-turtlebot3-extended which depends on turtlebot3-autorace, turtlebot3-applications, turtlebot3-applications-msgs, slam-karto which exist in melodic where this packagegroup was originally used, but were never ported to dashing"
SKIP_RECIPE[ros-testing] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'launch', 'launch: depends on launch-testing-ament-cmake->launch-testing-native->launch-native', '', d)}"
SKIP_RECIPE[ros2test-native] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'launch', 'launch: depends on launch-testing-native->launch-native', '', d)}"
SKIP_RECIPE[rosidl-typesupport-connext-c] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'connext', 'connext: depends on (rosidl-typesupport-connext-cpp-native,connext-cmake-module-native)->rti-connext-dds-native which is not available', '', d)}"
SKIP_RECIPE[rosidl-typesupport-connext-cpp-native] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'connext', 'connext: depends on rti-connext-dds-native which is not available', '', d)}"
SKIP_RECIPE[rosidl-typesupport-connext-cpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'connext', 'connext: depends on rti-connext-dds-native which is not available', '', d)}"
SKIP_RECIPE[rosidl-typesupport-opensplice-c] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'opensplice', 'opensplice: depends on libopensplice69-native which is not available', '', d)}"
SKIP_RECIPE[rosidl-typesupport-opensplice-cpp] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'opensplice', 'opensplice: depends on libopensplice69-native which is not available', '', d)}"
SKIP_RECIPE[rqt-action] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-common-plugins] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-py-common->qtbase; pyqt5: depends on (rqt-srv,rqt-plot,rqt-topic,rqt-service-caller,rqt-console,rqt-publisher,rqt-top,rqt-reconfigure,rqt-action,rqt-image-view,rqt-shell,rqt-py-common,rqt-graph,rqt-py-console,rqt-msg)->python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-console] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-py-common->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-graph] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-gui-cpp] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qtbase; pyqt5: depends on qt-gui-cpp->python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-gui-py] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-gui->python-qt-binding->qtbase; pyqt5: depends on rqt-gui->python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-gui] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-image-view] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qtbase; pyqt5: depends on rqt-gui->python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-msg] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-py-common->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-plot] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'python3-matplotlib'], 'qt5: depends on (python-qt-binding-,rqt-py-common)->qtbase; python3-matplotlib: depends on python3-matplotlib which is not available', '', d)}"
SKIP_RECIPE[rqt-publisher] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-gui->python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-py-common] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-py-console] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-reconfigure] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-py-common->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-robot-monitor] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: rdepends on rqt-gui,rqt-gui-py,qt-gui-py-common which depends qt-gui which depends on qtbase; pyqt5: rdepends on rqt-gui,rqt-gui-py,qt-gui-py-common which depends on qt-gui which depends on python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-robot-steering] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-service-caller] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-gui-py->python-qt-binding->qtbase; pyqt5: depends on rqt-gui-py->rqt-gui->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-shell] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-srv] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-msg->python-qt-binding->qtbase; pyqt5: depends on rqt-gui->python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-tf-tree] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-top] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on python-qt-binding->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt-topic] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-py-common->qtbase; pyqt5: depends on python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rqt] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'pyqt5'], 'qt5: depends on rqt-py-common->qtbase; pyqt5: depends on rqt-gui->python-qt-binding->python3-pyqt5 which requires pyqt5', '', d)}"
SKIP_RECIPE[rviz2] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on rviz-common->qtbase; x11: depends on rviz-common->rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[rviz-common] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on qtbase; x11: depends on rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[rviz-default-plugins] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on qtbase; x11: depends on rviz-common->rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[rviz-ogre-vendor] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['opengl', 'x11'], 'opengl: depends on mesa which is not available because of missing opengl or vulkan in DISTRO_FEATURES; x11: depends on libx11,libxrandr,libxaw which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[rviz-rendering] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on qtbase; x11: depends on rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[rviz-rendering-tests] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on rviz-rendering0>qtbase; x11: depends on rviz-rendering->rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[rviz-visual-testing-framework] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on rviz-common->qtbase; x11: depends on rviz-common->rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[slam-toolbox] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'qt5: depends on qtbase; x11: depends on rviz-common->rviz-ogre-vendor->(libx11,libxrandr,libxaw) which require x11 in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[spatio-temporal-voxel-layer] ?= "Depends on unavailable ROS_UNRESOLVED_DEP-libopenvdb, ROS_UNRESOLVED_DEP-libopenexr-dev, ROS_UNRESOLVED_DEP-libopenvdb-dev"
SKIP_RECIPE[swri-console] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'qt5-widgets'], 'qt5: depends on qtbase; qt5-widgets: needs widgets enabled in qtbase PACKAGECONFIG', '', d)}"
SKIP_RECIPE[tile-map] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'x11'], 'Requires libqt-rosdev->qtbase which requires meta-qt5 to be included and depends on mapviz->(freeglut, libxmu, libxi) which require x11; qt-gui-cpp: depends on mapviz which rdepends on rqt-gui-cpp which depends on qt-gui-cpp which requires pyqt5-native for sip', '', d)}"
SKIP_RECIPE[tracetools-read] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'babeltrace-python', 'babeltrace-python: rdepends on ROS_UNRESOLVED_DEP-python3-babeltrace and python bindings in babeltrace are not enabled as shown in log.do_configure - configure: You may configure with --enable-python-bindings if you want Python bindings.', '', d)}"
SKIP_RECIPE[tts] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gst-python', 'gst-python: requires gstreamer1.0-python which requires gobject-introspection-data in DISTRO_FEATURES', '', d)}"
SKIP_RECIPE[turtlebot3-gazebo] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on gazebo-ros-pkgs->gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[turtlebot3-simulations] ?= "${@bb.utils.contains('ROS_WORLD_SKIP_GROUPS', 'gazebo', 'gazebo: depends on turtlebot3-gazebo->gazebo-ros-pkgs->gazebo-rosdev->gazebo which is not available', '', d)}"
SKIP_RECIPE[turtlesim] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['qt5', 'qt5-widgets'], 'qt5: depends on qtbase; qt5-widgets: needs widgets enabled in qtbase PACKAGECONFIG', '', d)}"
SKIP_RECIPE[web-video-server] ?= "${@bb.utils.contains_any('ROS_WORLD_SKIP_GROUPS', ['ffmpeg', 'x264'], 'ffmpeg: Depends on ffmpeg which requires commercial license; x264: Depends on ffmpeg which depends on x264 which requires commercial license', '', d)}"
